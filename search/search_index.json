{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deprecated! This is an old version of the server setup guide that I have made. To check the newest one, visit this link . Introduction \u00b6 This is a simple guide that focuses on the installation and configuration of a little home server that runs multiple services for various purposes. The server currently runs: Plex (media server), OpenVPN , TeamSpeak 3 , Squid (HTTP proxy), Transmission (torrent seeding and downloading), Discord Bots (mainly music bots), Samba (Windows file sharing) among other services and various game servers . This guide is organized by categories which can be found on the navigation bar above this text.","title":"Home"},{"location":"#introduction","text":"This is a simple guide that focuses on the installation and configuration of a little home server that runs multiple services for various purposes. The server currently runs: Plex (media server), OpenVPN , TeamSpeak 3 , Squid (HTTP proxy), Transmission (torrent seeding and downloading), Discord Bots (mainly music bots), Samba (Windows file sharing) among other services and various game servers . This guide is organized by categories which can be found on the navigation bar above this text.","title":"Introduction"},{"location":"discord-bots/24-7-musicbot/","text":"24/7 Music Bot \u00b6 Installing Requirements \u00b6 The 24/7 Music Bot we're going to use requires Node.js and ffmpeg, to install them: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs ffmpeg After executing these two commands, we will have access to the npm and node commands. Installation \u00b6 To install the 24/7 Music Bot, we will first clone the project from its repo from the discord user: sudo -iu discord git clone https://github.com/moonstar-x/discord-music-24-7.git This will create a discord-music-24-7 folder which will have everything we need to install our bot. We can no access the folder and install the dependencies: cd discord-music-24-7 npm install Configuration \u00b6 Inside the config folder there is a settings.json.example file, we'll rename it and edit it: mv settings.json.example settings.json nano settings.json In here, change the settings to your own liking. Tip If you need help looking for the voice channel ID, check out this guide . After everything is set up, you can start up the bot with: npm start Auto-starting \u00b6 Because we want this bot to run on system startup, we'll create a service to make it run when the computer turns on. Create the service file with: sudo nano /etc/systemd/system/discord_247_music.service Insert the following in the editor: [ Unit ] Description = Discord 24 -7 Music Bot After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/discord-music-24-7/ ExecStart = /usr/bin/npm start Restart = always [ Install ] WantedBy = multi-user.target Once saved, start and enable the service. sudo systemctl daemon-reload sudo systemctl start discord_247_music.service sudo systemctl enable discord_247_music.service","title":"24/7 Music Bot"},{"location":"discord-bots/24-7-musicbot/#247-music-bot","text":"","title":"24/7 Music Bot"},{"location":"discord-bots/24-7-musicbot/#installing-requirements","text":"The 24/7 Music Bot we're going to use requires Node.js and ffmpeg, to install them: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs ffmpeg After executing these two commands, we will have access to the npm and node commands.","title":"Installing Requirements"},{"location":"discord-bots/24-7-musicbot/#installation","text":"To install the 24/7 Music Bot, we will first clone the project from its repo from the discord user: sudo -iu discord git clone https://github.com/moonstar-x/discord-music-24-7.git This will create a discord-music-24-7 folder which will have everything we need to install our bot. We can no access the folder and install the dependencies: cd discord-music-24-7 npm install","title":"Installation"},{"location":"discord-bots/24-7-musicbot/#configuration","text":"Inside the config folder there is a settings.json.example file, we'll rename it and edit it: mv settings.json.example settings.json nano settings.json In here, change the settings to your own liking. Tip If you need help looking for the voice channel ID, check out this guide . After everything is set up, you can start up the bot with: npm start","title":"Configuration"},{"location":"discord-bots/24-7-musicbot/#auto-starting","text":"Because we want this bot to run on system startup, we'll create a service to make it run when the computer turns on. Create the service file with: sudo nano /etc/systemd/system/discord_247_music.service Insert the following in the editor: [ Unit ] Description = Discord 24 -7 Music Bot After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/discord-music-24-7/ ExecStart = /usr/bin/npm start Restart = always [ Install ] WantedBy = multi-user.target Once saved, start and enable the service. sudo systemctl daemon-reload sudo systemctl start discord_247_music.service sudo systemctl enable discord_247_music.service","title":"Auto-starting"},{"location":"discord-bots/free-games-notifier/","text":"Free Games Notifier Bot \u00b6 Installing Requirements \u00b6 The free games notifier bot that we're going to use requires Node.js , for this we will install it: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs After executing these two commands, we will have access to the npm and node commands. Installation \u00b6 To install the free games notifier bot, we will first clone the project from its repo from the discord user: sudo -iu discord git clone https://github.com/moonstar-x/discord-free-games-notifier.git This will create a folder called discord-free-games-notifier which will have everything we need to install our bot. We can now access the folder and install the dependencies: cd discord-free-games-notifier npm install Configuration \u00b6 Inside the config folder there is a settings.json.example file, we'll rename it and then we'll edit it: mv settings.json.example settings.json nano settings.json In here, change the settings to your own liking. After everything has been set up, you can start the bot by inputting: npm start Auto-starting \u00b6 Just like for the previous bots, we want this one to auto-start on system boot. We'll make a systemd service. For this, create the following file using a sudoer user account: sudo nano /etc/systemd/system/discord_free_games_notifier.service Inside the editor, paste the following text: [ Unit ] Description = Discord Free Games Notifier After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/discord-free-games-notifier/ ExecStart = /usr/bin/npm start Restart = always [ Install ] WantedBy = multi-user.target Now, we refresh, start and enable the service. sudo systemctl daemon-reload sudo systemctl start discord_free_games_notifier.service sudo systemctl enable discord_free_games_notifier.service","title":"Free Games Notifier Bot"},{"location":"discord-bots/free-games-notifier/#free-games-notifier-bot","text":"","title":"Free Games Notifier Bot"},{"location":"discord-bots/free-games-notifier/#installing-requirements","text":"The free games notifier bot that we're going to use requires Node.js , for this we will install it: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs After executing these two commands, we will have access to the npm and node commands.","title":"Installing Requirements"},{"location":"discord-bots/free-games-notifier/#installation","text":"To install the free games notifier bot, we will first clone the project from its repo from the discord user: sudo -iu discord git clone https://github.com/moonstar-x/discord-free-games-notifier.git This will create a folder called discord-free-games-notifier which will have everything we need to install our bot. We can now access the folder and install the dependencies: cd discord-free-games-notifier npm install","title":"Installation"},{"location":"discord-bots/free-games-notifier/#configuration","text":"Inside the config folder there is a settings.json.example file, we'll rename it and then we'll edit it: mv settings.json.example settings.json nano settings.json In here, change the settings to your own liking. After everything has been set up, you can start the bot by inputting: npm start","title":"Configuration"},{"location":"discord-bots/free-games-notifier/#auto-starting","text":"Just like for the previous bots, we want this one to auto-start on system boot. We'll make a systemd service. For this, create the following file using a sudoer user account: sudo nano /etc/systemd/system/discord_free_games_notifier.service Inside the editor, paste the following text: [ Unit ] Description = Discord Free Games Notifier After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/discord-free-games-notifier/ ExecStart = /usr/bin/npm start Restart = always [ Install ] WantedBy = multi-user.target Now, we refresh, start and enable the service. sudo systemctl daemon-reload sudo systemctl start discord_free_games_notifier.service sudo systemctl enable discord_free_games_notifier.service","title":"Auto-starting"},{"location":"discord-bots/jda-music-bot/","text":"JDA Music Bot \u00b6 jagrosh's Music Bot is made in Java with JDA, a Discord API wrapper for Java. It is one of the best music bots I've seen out there, it does what it says and does it in a simple way - stream music to a Discord voice channel. Installing Requirements \u00b6 To use this bot you'll need Java. To install it run the following: sudo apt-add-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer Installation \u00b6 We'll now download the latest version of jagrosh's Music Bot (the example below is most likely outdated). sudo -iu discord mkdir JDAMusicBot && cd JDAMusicBot wget https://github.com/jagrosh/MusicBot/releases/download/0.2.2/JMusicBot-0.2.2.jar mv JMusicBot-0.2.2.jar JMusicBot.jar Configuration \u00b6 Once downloaded we'll create the config file. nano config.txt Inside the configuration we'll add the following, make sure to add your own owner ID and bot token, and change any other setting that may best suit your needs. token=<your_token_here> owner=<your_owner_id> prefix=% game=\"DEFAULT\" status=ONLINE songinstatus=true altprefix=\"NONE\" stayinchannel=true maxtime=0 updatealerts=false You can now run your Music Bot. java -jar JMusicBot.jar Auto-starting \u00b6 We'll now create a service so the bot can autostart on login, but before creating it we'll make a simple script that we can use to start the bot instead of running the Java command manually. nano start.sh Add the following text: #!/bin/bash java -jar JMusicBot.jar And make the script executable: chmod +x start.sh We can now create the service file as an administrator user: sudo nano /lib/systemd/system/discord_jda_musicbot.service Insert the following in the editor: [ Unit ] Description = Discord JDA Music Bot After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/JDAMusicBot ExecStart = /home/discord/JDAMusicBot/start.sh Restart = always [ Install ] WantedBy = multi-user.target Once saved, start and enable the service. sudo systemctl start discord_jda_musicbot.service sudo systemctl enable discord_jda_musicbot.service Note If there's an update for the music bot jar file, make sure to rename it to JMusicBot.jar or edit the start.sh script so it runs the newest version.","title":"JDA Music Bot"},{"location":"discord-bots/jda-music-bot/#jda-music-bot","text":"jagrosh's Music Bot is made in Java with JDA, a Discord API wrapper for Java. It is one of the best music bots I've seen out there, it does what it says and does it in a simple way - stream music to a Discord voice channel.","title":"JDA Music Bot"},{"location":"discord-bots/jda-music-bot/#installing-requirements","text":"To use this bot you'll need Java. To install it run the following: sudo apt-add-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer","title":"Installing Requirements"},{"location":"discord-bots/jda-music-bot/#installation","text":"We'll now download the latest version of jagrosh's Music Bot (the example below is most likely outdated). sudo -iu discord mkdir JDAMusicBot && cd JDAMusicBot wget https://github.com/jagrosh/MusicBot/releases/download/0.2.2/JMusicBot-0.2.2.jar mv JMusicBot-0.2.2.jar JMusicBot.jar","title":"Installation"},{"location":"discord-bots/jda-music-bot/#configuration","text":"Once downloaded we'll create the config file. nano config.txt Inside the configuration we'll add the following, make sure to add your own owner ID and bot token, and change any other setting that may best suit your needs. token=<your_token_here> owner=<your_owner_id> prefix=% game=\"DEFAULT\" status=ONLINE songinstatus=true altprefix=\"NONE\" stayinchannel=true maxtime=0 updatealerts=false You can now run your Music Bot. java -jar JMusicBot.jar","title":"Configuration"},{"location":"discord-bots/jda-music-bot/#auto-starting","text":"We'll now create a service so the bot can autostart on login, but before creating it we'll make a simple script that we can use to start the bot instead of running the Java command manually. nano start.sh Add the following text: #!/bin/bash java -jar JMusicBot.jar And make the script executable: chmod +x start.sh We can now create the service file as an administrator user: sudo nano /lib/systemd/system/discord_jda_musicbot.service Insert the following in the editor: [ Unit ] Description = Discord JDA Music Bot After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/JDAMusicBot ExecStart = /home/discord/JDAMusicBot/start.sh Restart = always [ Install ] WantedBy = multi-user.target Once saved, start and enable the service. sudo systemctl start discord_jda_musicbot.service sudo systemctl enable discord_jda_musicbot.service Note If there's an update for the music bot jar file, make sure to rename it to JMusicBot.jar or edit the start.sh script so it runs the newest version.","title":"Auto-starting"},{"location":"discord-bots/setting-up/","text":"Setting-up User \u00b6 The following bots will be installed in a separate user space. sudo adduser --disabled-login discord Requirements \u00b6 When hosting your own bots for Discord you'll need a bot token, which is generated when creating an application account on Discord. I won't get into further detail, but I'll leave a guide that I made previously for a bot that I made: Getting a bot token. Finding out your user ID. Adding your bot to your server. Note The following guides are not limited to music bots, you can follow these guides for any kind of bot.","title":"Setting Up"},{"location":"discord-bots/setting-up/#setting-up-user","text":"The following bots will be installed in a separate user space. sudo adduser --disabled-login discord","title":"Setting-up User"},{"location":"discord-bots/setting-up/#requirements","text":"When hosting your own bots for Discord you'll need a bot token, which is generated when creating an application account on Discord. I won't get into further detail, but I'll leave a guide that I made previously for a bot that I made: Getting a bot token. Finding out your user ID. Adding your bot to your server. Note The following guides are not limited to music bots, you can follow these guides for any kind of bot.","title":"Requirements"},{"location":"discord-bots/tts-bot/","text":"Text-to-Speech Bot \u00b6 Installing Requirements \u00b6 The TTS bot that we're going to use requires Node.js and ffmpeg, for this we will install it: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs ffmpeg After executing these two commands, we will have access to the npm and node commands. Installation \u00b6 To install the TTS bot, we will first clone the project from its repo from the discord user: sudo -iu discord git clone https://github.com/moonstar-x/discord-tts-bot.git This will create a folder called discord-tts-bot which will have everything we need to install our bot. We can now access the folder and install the dependencies: cd discord-tts-bot npm install Configuration \u00b6 Inside the config folder there is a settings.json.example file, we'll rename it and then we'll edit it: mv settings.json.example settings.json nano settings.json In here, change the settings to your own liking. After everything has been set up, you can start the bot by inputting: npm start Auto-starting \u00b6 Just like for the previous bots, we want this one to auto-start on system boot. We'll make a systemd service. For this, create the following file using a sudoer user account: sudo nano /etc/systemd/system/discord_tts.service Inside the editor, paste the following text: [ Unit ] Description = Discord TTS After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/discord-tts-bot/ ExecStart = /usr/bin/npm start Restart = always [ Install ] WantedBy = multi-user.target Now, we refresh, start and enable the service. sudo systemctl daemon-reload sudo systemctl start discord_tts.service sudo systemctl enable discord_tts.service","title":"Text-to-Speech Bot"},{"location":"discord-bots/tts-bot/#text-to-speech-bot","text":"","title":"Text-to-Speech Bot"},{"location":"discord-bots/tts-bot/#installing-requirements","text":"The TTS bot that we're going to use requires Node.js and ffmpeg, for this we will install it: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs ffmpeg After executing these two commands, we will have access to the npm and node commands.","title":"Installing Requirements"},{"location":"discord-bots/tts-bot/#installation","text":"To install the TTS bot, we will first clone the project from its repo from the discord user: sudo -iu discord git clone https://github.com/moonstar-x/discord-tts-bot.git This will create a folder called discord-tts-bot which will have everything we need to install our bot. We can now access the folder and install the dependencies: cd discord-tts-bot npm install","title":"Installation"},{"location":"discord-bots/tts-bot/#configuration","text":"Inside the config folder there is a settings.json.example file, we'll rename it and then we'll edit it: mv settings.json.example settings.json nano settings.json In here, change the settings to your own liking. After everything has been set up, you can start the bot by inputting: npm start","title":"Configuration"},{"location":"discord-bots/tts-bot/#auto-starting","text":"Just like for the previous bots, we want this one to auto-start on system boot. We'll make a systemd service. For this, create the following file using a sudoer user account: sudo nano /etc/systemd/system/discord_tts.service Inside the editor, paste the following text: [ Unit ] Description = Discord TTS After = network.target [ Service ] Type = simple User = discord WorkingDirectory = /home/discord/discord-tts-bot/ ExecStart = /usr/bin/npm start Restart = always [ Install ] WantedBy = multi-user.target Now, we refresh, start and enable the service. sudo systemctl daemon-reload sudo systemctl start discord_tts.service sudo systemctl enable discord_tts.service","title":"Auto-starting"},{"location":"game-servers/arma3/","text":"Arma 3 Server \u00b6 Installation \u00b6 The Arma 3 server will require a certain package to be able to run, you can install it using the following command in a sudoer user: sudo apt-get install lib32stdc++6 Modded Instance \u00b6 To install the Arma 3 server, you'll need SteamCMD and a Steam account that has a license for Arma 3 . Remember to do the following commands with the steam user (you can switch using sudo -iu steam ). Head over to the folder where SteamCMD is located and run SteamCMD : login <username> You'll be prompted for your password and your Steam Guard (2FA) code. Once you're in, change the directory where you want Arma 3 to be installed (use absolute paths): force_install_dir /home/steam/arma3 You can now install Arma 3 : app_update 233780 Vanilla Instance \u00b6 In case you want to run a clean and mod-less server I recommend you to install the server again in another folder to avoid having mod folders inside and keys for mods you normally want in a modded instance. Luckily, you can easily do this with SteamCMD , login with your account like we did previously and change the installation directory to somewhere else: force_install_dir /home/steam/arma3vanilla To install Arma 3 : app_update 233780 Configuring Server \u00b6 Before any configuration process, we need to create the folders that we require to save the server profiles (where custom difficulties and vars are saved): mkdir -p ~/\".local/share/Arma 3\" && mkdir -p ~/\".local/share/Arma 3 - Other Profiles\" Server Profile \u00b6 In order to use a server profile where we'll set up the custom difficulties, we'll need to create a folder inside the previously created folder with a name for the server: cd ~/.local/share/Arma\\ 3\\ -\\ Other\\ Profiles/ && mkdir server && cd server Here we can create the following file: nano server.Arma3Profile You can paste the following config or change it to your liking: version=1; blood=1; singleVoice=0; gamma=1; brightness=1; maxSamplesPlayed=96; activeKeys[]= { }; playedKeys[]= { }; difficulty=\"Custom\"; class DifficultyPresets { class CustomDifficulty { displayName=\"Custom\"; optionDescription=\"Custom Difficulty\"; levelAI=\"AILevelMedium\"; class Options { reducedDamage=0; groupIndicators=1; friendlyTags=1; enemyTags=0; detectedMines=0; commands=1; waypoints=1; tacticalPing=0; weaponInfo=1; stanceIndicator=1; staminaBar=0; weaponCrosshair=0; visionAid=0; thirdPersonView=0; cameraShake=1; scoreTable=1; deathMessages=1; vonID=1; mapContent=1; autoReport=1; multipleSaves=1; }; aiLevelPreset=1; }; class CustomAILevel { skillAI=0.5; precisionAI=0.5; }; }; sceneComplexity=400000; shadowZDistance=100; viewDistance=1500; preferredObjectViewDistance=1000; terrainGrid=25; volumeCD=10; volumeFX=10; volumeSpeech=10; volumeVoN=10; vonRecThreshold=0.029999999; Server Config \u00b6 Now, we'll go to the folder where we installed Arma 3 and create a config file with whatever name you wish: cd ~/arma3 nano modded.cfg You can paste the following config and change it or use whichever you want: steamPort = 2303; steamQueryPort = 2304; hostname = \"SERVER NAME\"; password = \"\"; passwordAdmin = \"SECRET\"; maxPlayers = 32; persistent = 0; disableVoN = 0; vonCodecQuality = 20; voteMissionPlayers = 1; voteThreshold = 0.66; allowedVoteCmds[] = { {\"admin\", false, false}, {\"kick\", false, true, 0.51}, {\"missions\", false, true}, {\"mission\", false, false}, {\"restart\", false, true}, {\"reassign\", false, false} }; timeStampFormat = \"short\"; logFile = \"server_console.log\"; BattlEye = 1; VerifySignatures = 2; kickDuplicate = 1; allowedFilePatching = 1; allowedLoadFileExtensions[] = {\"hpp\",\"sqs\",\"sqf\",\"fsm\",\"cpp\",\"paa\",\"txt\",\"xml\",\"inc\",\"ext\",\"sqm\",\"ods\",\"fxy\",\"lip\",\"csv\",\"kb\",\"bik\",\"bikb\",\"html\",\"htm\",\"biedi\"}; allowedPreprocessFileExtensions[] = {\"hpp\",\"sqs\",\"sqf\",\"fsm\",\"cpp\",\"paa\",\"txt\",\"xml\",\"inc\",\"ext\",\"sqm\",\"ods\",\"fxy\",\"lip\",\"csv\",\"kb\",\"bik\",\"bikb\",\"html\",\"htm\",\"biedi\"}; allowedHTMLLoadExtensions[] = {\"htm\",\"html\",\"php\",\"xml\",\"txt\"}; onUserConnected = \"\"; onUserDisconnected = \"\"; doubleIdDetected = \"\"; onUnsignedData = \"kick (_this select 0)\"; onHackeddData = \"kick (_this select 0)\"; headlessClients[] = {\"127.0.0.1\"}; localClient[] = {\"127.0.0.1\"}; As a side note, if you need to run servers with multiple configurations, you can always create more config files and use them at the server start. Mods \u00b6 Setting Up Case Insensitive On Purpose (ciopfs) \u00b6 On a Linux based installation, Arma 3 modding becomes a bit complicated because of the Unix filesystem's case sensitivity, which renders mods with capital letters in their filenames unusable. Luckily we can fix this with a nice package called ciopfs . The following commands should be done through a sudoer user account. sudo apt-get install ciopfs Now we'll create 2 folders where we'll install the mods and mount them with ciopfs : mkdir ~/arma3mods && mkdir ~/arma3mods_casesensitive ciopfs arma3mods arma3mods_casesensitive This change will be undone on system restart, so in order to have the following set itself up on system start, we'll need to create a service. Create the following service file: sudo nano /etc/systemd/system/arma3ciopfs.service Paste the following to the editor: Description=Arma 3 ciopfs mount. Wants=network.target After=syslog.target network-online.target [Service] Type=simple User=steam ExecStart=/usr/bin/ciopfs /home/steam/arma3mods /home/steam/arma3mods_casesensitive Restart=on-failure RestartSec=10 KillMode=process [Install] WantedBy=multi-user.target Restart systemctl and enable the service: sudo systemctl daemon-reload sudo systemctl enable arma3ciopfs.service sudo systemctl start arma3ciopfs.service Installing Mods \u00b6 Now we can go back to our steam user and start up SteamCMD . After logging in, you'll need to force the installation directory to the arma3mods_casesensitive folder that we created previously (while ciopfs is mounted). force_install_dir /home/steam/arma3mods_casesensitive And install the mods that you need: workshop_download_item 107410 <mod_id> After they've been installed, we'll need to create symlinks from the mod folders to our Arma 3 server's directory. For this we'll need to access the ~/arma3mods folder that we created previously (note that all the filenames here are lowercase). For each mod we'll create a symlink from the id folder to the server folder with the mod name. ln -s ~/arma3mods/steamapps/workshop/content/107410/<mod_id> ~/arma3/@<mod_name> As an example, for the CBA_A3 mod: ln -s ~/arma3mods/steamapps/workshop/content/107410/450814997 ~/arma3/@CBA_A3 Finally, we'll also need to copy the keys for each mod into the keys folder inside the server directory. Mod keys will be in the ~/arma3mods/steamapps/workshop/content/107410/\\<MOD_ID\\>/keys (sometimes the last folder will be key rather than keys ). These keys will have a .bikey extension, and will need to be copied to ~/arma3/keys . Every time a mod gets updated, the keys should also be updated (replace the old ones with the new ones). Tip We can also make some symlinks to simplify accessing these folders: mkdir ~/arma3-data mkdir ~/arma3-data/workshop && mkdir ~/arma3-data/keys ln -s ~/arma3mods/steamapps/workshop/content/107410 ~/arma3-data/workshop ln -s ~/arma3/keys ~/arma3-data/keys Updating Mods \u00b6 For the sake of simplicity we will just use a simple run-script instead of a full-fledged wrapper script. For this we will go to directory where SteamCMD is installed and we will create our little run-script : nano update_arma3.txt Inside the editor, paste the following, for each mod that you want to download/update you need to add a newline with the command workshop_download_item 107410 <addon_id> . @ShutdownonFailedCommand 1 @NoPromptForPassword 1 force_install_dir /home/steam/arma3 app_update 233780 force_install_dir /home/steam/arma3mods_casesensitive // For every addon, do the following // workshop_download_item 107410 <addon_id> workshop_download_item 107410 463939057 workshop_download_item 107410 333310405 quit Tip As a safety measure, you should add the same mod multiple times to avoid mod download failures. Now, we can make a small bash script so that we can easily run this run-script . nano update_arma3.sh Paste the following, make sure to change your username, here we're going to use the cached credentials so a password should not be required. #!/bin/bash ./steamcmd.sh +login <username> +runscript update_arma3.txt Make it executable: chmod +x update_arma3.sh Now, when we need to update the addons and the server files, just run the ./update_arma3.sh script. Mods List \u00b6 Here's a small list of the mods that I currently use: Workshop ID Addon Name Folder Name 463939057 ACE @ACE 450814997 CBA_A3 @CBA_A3 621650475 CUP ACE3 Compatibility Addon - Vehicles @CUP_ACE_compat_vehicles 549676314 CUP ACE3 Compatibility Addon - Weapons @CUP_ACE_compat_weapons 583496184 CUP Terrains - Core @CUP_Core 853743366 CUP Terrains - CWA @CUP_CWA 583544987 CUP Terrains - Maps @CUP_Maps 497661914 CUP Units @CUP_Units 541888371 CUP Vehicles @CUP_Vehicles 497660133 CUP Weapons @CUP_Weapons 333310405 Enhanced Movement @Enhanced_Movement 843425103 RHSAFRF @RHSAFRF 843593391 RHSGREF @RHSGREF 843632231 RHSSAF @RHSSAF 843577117 RHSUSAF @RHSUSAF 498740884 SharkTac User Interface @SharkTac_UI 620019431 TaskForce Arrowhead Radio @task_force_radio 501966277 Zombies and Demons @Zombies_and_Demons Infinite Loading Screen Bug \u00b6 Unfortunately, the Linux Arma 3 server can be a bit buggy, this is the case for servers that run certain mod combinations (in this case CUP and RHS) that will make clients get stuck on an infinite loading screen when joining the server, the server console will not display any error messages and will in fact freeze the process. It seems the only way to fix this issue is to disable BattlEye from the server configs. In the server config, change the following: BattlEye = 0; This will in fact turn off BattlEye on your server which will make it less secure against hackers, sadly it is the only fix for this weird problem. Custom Missions \u00b6 In order to run custom missions on your server, you'll need to add the .pbo files inside the mpmissions folder inside the Arma 3 server folder. You can get the .pbo files directly from Steam Workshop if you download the missions through this Workshop Downloader or from Armaholic . Firewall Rules \u00b6 Again, we'll need to add the following firewall rules: sudo ufw allow 2302:2345/tcp sudo ufw allow 2302:2345/udp Running the Server \u00b6 Now, to run the game, we'll create a small script so we can easily save the addons that we want to run and the configs that we want to load. Inside the Arma 3 server directory, create the script file (the filename with whatever you want): nano start_<name>.sh Inside the editor, paste the following: #!/bin/bash ./arma3server -name = <server_name> -config = <config_file> -mod = @mod1 \\; @mod2 \\; @mod3... Note server_name refers to the server name that you used for the Arma 3 Profile that is located in ~/.local/share/Arma 3 - Other Profiles , the config_file refers to the Arma 3 Config that is inside the Arma 3 directory, replace them with your own settings. An example for this script that runs ACE and CBA_A3. #!/bin/bash ./arma3server -name = server -config = modded.cfg -mod = @CBA_A3 \\; @ACE As per always, the script must be made executable: chmod +x <script_name>.sh Headless Client \u00b6 A headless client is an instance of the game with no interface. The idea of having a headless client on a server is to reduce the load on the server process by taking control of the AI processing. This will (ideally) make the server run better and the AI more responsive since their processing will be done somewhere else, their reaction times will be much quicker. Setting up a headless client is a trivial task. The first thing that should be done is modify the server config ( .cfg file) to allow our headless client. In server.cfg (or whichever it is the name of your .cfg file), add or edit the following lines with the IP address of your headless client: headlessClients[] = {\"127.0.0.1\"}; localClient[] = {\"127.0.0.1\"}; Note In this case, our headless client will be running in the same machine as the server, which means that 127.0.0.1 will be used. You can add as many of these as you want. Once the server config allows the headless client, we'll create a run script to start the headless client. #!/bin/bash ./arma3server -client -connect = SERVER_IP -password = SERVER_PASSWORD -mod = @MOD1 \\; @MOD2... Note You can omit the password directive if the server you're connecting to has no password. You can also omit the mod directive if the server has no mods. Finally, make the script executable: chmod +x start_hc.sh Now you're ready. Start the server and then the headless client, which will connect directly and automatically offload the AI processing (if the mission implements headless clients properly). Start Server and Headless Client Script \u00b6 If you wish to run them both directly, you can create the following script: #!/bin/bash echo \"Launching server...\" screen -dmS arma3-server /bin/bash -c \"./start_antistasi.sh\" echo \"Launching Headless Client...\" screen -dmS arma3-hc /bin/bash -c \"./hc_antistasi.sh\" Note Replace \"./start_antistasi.sh\" with the name of the server start script and \"./hc_antistasi.sh\" with the name of the headless client start script. This will start both processes in two different screen windows. You can switch to them by using: screen -rd arma3-server screen -rd arma3-hc","title":"Arma 3"},{"location":"game-servers/arma3/#arma-3-server","text":"","title":"Arma 3 Server"},{"location":"game-servers/arma3/#installation","text":"The Arma 3 server will require a certain package to be able to run, you can install it using the following command in a sudoer user: sudo apt-get install lib32stdc++6","title":"Installation"},{"location":"game-servers/arma3/#modded-instance","text":"To install the Arma 3 server, you'll need SteamCMD and a Steam account that has a license for Arma 3 . Remember to do the following commands with the steam user (you can switch using sudo -iu steam ). Head over to the folder where SteamCMD is located and run SteamCMD : login <username> You'll be prompted for your password and your Steam Guard (2FA) code. Once you're in, change the directory where you want Arma 3 to be installed (use absolute paths): force_install_dir /home/steam/arma3 You can now install Arma 3 : app_update 233780","title":"Modded Instance"},{"location":"game-servers/arma3/#vanilla-instance","text":"In case you want to run a clean and mod-less server I recommend you to install the server again in another folder to avoid having mod folders inside and keys for mods you normally want in a modded instance. Luckily, you can easily do this with SteamCMD , login with your account like we did previously and change the installation directory to somewhere else: force_install_dir /home/steam/arma3vanilla To install Arma 3 : app_update 233780","title":"Vanilla Instance"},{"location":"game-servers/arma3/#configuring-server","text":"Before any configuration process, we need to create the folders that we require to save the server profiles (where custom difficulties and vars are saved): mkdir -p ~/\".local/share/Arma 3\" && mkdir -p ~/\".local/share/Arma 3 - Other Profiles\"","title":"Configuring Server"},{"location":"game-servers/arma3/#server-profile","text":"In order to use a server profile where we'll set up the custom difficulties, we'll need to create a folder inside the previously created folder with a name for the server: cd ~/.local/share/Arma\\ 3\\ -\\ Other\\ Profiles/ && mkdir server && cd server Here we can create the following file: nano server.Arma3Profile You can paste the following config or change it to your liking: version=1; blood=1; singleVoice=0; gamma=1; brightness=1; maxSamplesPlayed=96; activeKeys[]= { }; playedKeys[]= { }; difficulty=\"Custom\"; class DifficultyPresets { class CustomDifficulty { displayName=\"Custom\"; optionDescription=\"Custom Difficulty\"; levelAI=\"AILevelMedium\"; class Options { reducedDamage=0; groupIndicators=1; friendlyTags=1; enemyTags=0; detectedMines=0; commands=1; waypoints=1; tacticalPing=0; weaponInfo=1; stanceIndicator=1; staminaBar=0; weaponCrosshair=0; visionAid=0; thirdPersonView=0; cameraShake=1; scoreTable=1; deathMessages=1; vonID=1; mapContent=1; autoReport=1; multipleSaves=1; }; aiLevelPreset=1; }; class CustomAILevel { skillAI=0.5; precisionAI=0.5; }; }; sceneComplexity=400000; shadowZDistance=100; viewDistance=1500; preferredObjectViewDistance=1000; terrainGrid=25; volumeCD=10; volumeFX=10; volumeSpeech=10; volumeVoN=10; vonRecThreshold=0.029999999;","title":"Server Profile"},{"location":"game-servers/arma3/#server-config","text":"Now, we'll go to the folder where we installed Arma 3 and create a config file with whatever name you wish: cd ~/arma3 nano modded.cfg You can paste the following config and change it or use whichever you want: steamPort = 2303; steamQueryPort = 2304; hostname = \"SERVER NAME\"; password = \"\"; passwordAdmin = \"SECRET\"; maxPlayers = 32; persistent = 0; disableVoN = 0; vonCodecQuality = 20; voteMissionPlayers = 1; voteThreshold = 0.66; allowedVoteCmds[] = { {\"admin\", false, false}, {\"kick\", false, true, 0.51}, {\"missions\", false, true}, {\"mission\", false, false}, {\"restart\", false, true}, {\"reassign\", false, false} }; timeStampFormat = \"short\"; logFile = \"server_console.log\"; BattlEye = 1; VerifySignatures = 2; kickDuplicate = 1; allowedFilePatching = 1; allowedLoadFileExtensions[] = {\"hpp\",\"sqs\",\"sqf\",\"fsm\",\"cpp\",\"paa\",\"txt\",\"xml\",\"inc\",\"ext\",\"sqm\",\"ods\",\"fxy\",\"lip\",\"csv\",\"kb\",\"bik\",\"bikb\",\"html\",\"htm\",\"biedi\"}; allowedPreprocessFileExtensions[] = {\"hpp\",\"sqs\",\"sqf\",\"fsm\",\"cpp\",\"paa\",\"txt\",\"xml\",\"inc\",\"ext\",\"sqm\",\"ods\",\"fxy\",\"lip\",\"csv\",\"kb\",\"bik\",\"bikb\",\"html\",\"htm\",\"biedi\"}; allowedHTMLLoadExtensions[] = {\"htm\",\"html\",\"php\",\"xml\",\"txt\"}; onUserConnected = \"\"; onUserDisconnected = \"\"; doubleIdDetected = \"\"; onUnsignedData = \"kick (_this select 0)\"; onHackeddData = \"kick (_this select 0)\"; headlessClients[] = {\"127.0.0.1\"}; localClient[] = {\"127.0.0.1\"}; As a side note, if you need to run servers with multiple configurations, you can always create more config files and use them at the server start.","title":"Server Config"},{"location":"game-servers/arma3/#mods","text":"","title":"Mods"},{"location":"game-servers/arma3/#setting-up-case-insensitive-on-purpose-ciopfs","text":"On a Linux based installation, Arma 3 modding becomes a bit complicated because of the Unix filesystem's case sensitivity, which renders mods with capital letters in their filenames unusable. Luckily we can fix this with a nice package called ciopfs . The following commands should be done through a sudoer user account. sudo apt-get install ciopfs Now we'll create 2 folders where we'll install the mods and mount them with ciopfs : mkdir ~/arma3mods && mkdir ~/arma3mods_casesensitive ciopfs arma3mods arma3mods_casesensitive This change will be undone on system restart, so in order to have the following set itself up on system start, we'll need to create a service. Create the following service file: sudo nano /etc/systemd/system/arma3ciopfs.service Paste the following to the editor: Description=Arma 3 ciopfs mount. Wants=network.target After=syslog.target network-online.target [Service] Type=simple User=steam ExecStart=/usr/bin/ciopfs /home/steam/arma3mods /home/steam/arma3mods_casesensitive Restart=on-failure RestartSec=10 KillMode=process [Install] WantedBy=multi-user.target Restart systemctl and enable the service: sudo systemctl daemon-reload sudo systemctl enable arma3ciopfs.service sudo systemctl start arma3ciopfs.service","title":"Setting Up Case Insensitive On Purpose (ciopfs)"},{"location":"game-servers/arma3/#installing-mods","text":"Now we can go back to our steam user and start up SteamCMD . After logging in, you'll need to force the installation directory to the arma3mods_casesensitive folder that we created previously (while ciopfs is mounted). force_install_dir /home/steam/arma3mods_casesensitive And install the mods that you need: workshop_download_item 107410 <mod_id> After they've been installed, we'll need to create symlinks from the mod folders to our Arma 3 server's directory. For this we'll need to access the ~/arma3mods folder that we created previously (note that all the filenames here are lowercase). For each mod we'll create a symlink from the id folder to the server folder with the mod name. ln -s ~/arma3mods/steamapps/workshop/content/107410/<mod_id> ~/arma3/@<mod_name> As an example, for the CBA_A3 mod: ln -s ~/arma3mods/steamapps/workshop/content/107410/450814997 ~/arma3/@CBA_A3 Finally, we'll also need to copy the keys for each mod into the keys folder inside the server directory. Mod keys will be in the ~/arma3mods/steamapps/workshop/content/107410/\\<MOD_ID\\>/keys (sometimes the last folder will be key rather than keys ). These keys will have a .bikey extension, and will need to be copied to ~/arma3/keys . Every time a mod gets updated, the keys should also be updated (replace the old ones with the new ones). Tip We can also make some symlinks to simplify accessing these folders: mkdir ~/arma3-data mkdir ~/arma3-data/workshop && mkdir ~/arma3-data/keys ln -s ~/arma3mods/steamapps/workshop/content/107410 ~/arma3-data/workshop ln -s ~/arma3/keys ~/arma3-data/keys","title":"Installing Mods"},{"location":"game-servers/arma3/#updating-mods","text":"For the sake of simplicity we will just use a simple run-script instead of a full-fledged wrapper script. For this we will go to directory where SteamCMD is installed and we will create our little run-script : nano update_arma3.txt Inside the editor, paste the following, for each mod that you want to download/update you need to add a newline with the command workshop_download_item 107410 <addon_id> . @ShutdownonFailedCommand 1 @NoPromptForPassword 1 force_install_dir /home/steam/arma3 app_update 233780 force_install_dir /home/steam/arma3mods_casesensitive // For every addon, do the following // workshop_download_item 107410 <addon_id> workshop_download_item 107410 463939057 workshop_download_item 107410 333310405 quit Tip As a safety measure, you should add the same mod multiple times to avoid mod download failures. Now, we can make a small bash script so that we can easily run this run-script . nano update_arma3.sh Paste the following, make sure to change your username, here we're going to use the cached credentials so a password should not be required. #!/bin/bash ./steamcmd.sh +login <username> +runscript update_arma3.txt Make it executable: chmod +x update_arma3.sh Now, when we need to update the addons and the server files, just run the ./update_arma3.sh script.","title":"Updating Mods"},{"location":"game-servers/arma3/#mods-list","text":"Here's a small list of the mods that I currently use: Workshop ID Addon Name Folder Name 463939057 ACE @ACE 450814997 CBA_A3 @CBA_A3 621650475 CUP ACE3 Compatibility Addon - Vehicles @CUP_ACE_compat_vehicles 549676314 CUP ACE3 Compatibility Addon - Weapons @CUP_ACE_compat_weapons 583496184 CUP Terrains - Core @CUP_Core 853743366 CUP Terrains - CWA @CUP_CWA 583544987 CUP Terrains - Maps @CUP_Maps 497661914 CUP Units @CUP_Units 541888371 CUP Vehicles @CUP_Vehicles 497660133 CUP Weapons @CUP_Weapons 333310405 Enhanced Movement @Enhanced_Movement 843425103 RHSAFRF @RHSAFRF 843593391 RHSGREF @RHSGREF 843632231 RHSSAF @RHSSAF 843577117 RHSUSAF @RHSUSAF 498740884 SharkTac User Interface @SharkTac_UI 620019431 TaskForce Arrowhead Radio @task_force_radio 501966277 Zombies and Demons @Zombies_and_Demons","title":"Mods List"},{"location":"game-servers/arma3/#infinite-loading-screen-bug","text":"Unfortunately, the Linux Arma 3 server can be a bit buggy, this is the case for servers that run certain mod combinations (in this case CUP and RHS) that will make clients get stuck on an infinite loading screen when joining the server, the server console will not display any error messages and will in fact freeze the process. It seems the only way to fix this issue is to disable BattlEye from the server configs. In the server config, change the following: BattlEye = 0; This will in fact turn off BattlEye on your server which will make it less secure against hackers, sadly it is the only fix for this weird problem.","title":"Infinite Loading Screen Bug"},{"location":"game-servers/arma3/#custom-missions","text":"In order to run custom missions on your server, you'll need to add the .pbo files inside the mpmissions folder inside the Arma 3 server folder. You can get the .pbo files directly from Steam Workshop if you download the missions through this Workshop Downloader or from Armaholic .","title":"Custom Missions"},{"location":"game-servers/arma3/#firewall-rules","text":"Again, we'll need to add the following firewall rules: sudo ufw allow 2302:2345/tcp sudo ufw allow 2302:2345/udp","title":"Firewall Rules"},{"location":"game-servers/arma3/#running-the-server","text":"Now, to run the game, we'll create a small script so we can easily save the addons that we want to run and the configs that we want to load. Inside the Arma 3 server directory, create the script file (the filename with whatever you want): nano start_<name>.sh Inside the editor, paste the following: #!/bin/bash ./arma3server -name = <server_name> -config = <config_file> -mod = @mod1 \\; @mod2 \\; @mod3... Note server_name refers to the server name that you used for the Arma 3 Profile that is located in ~/.local/share/Arma 3 - Other Profiles , the config_file refers to the Arma 3 Config that is inside the Arma 3 directory, replace them with your own settings. An example for this script that runs ACE and CBA_A3. #!/bin/bash ./arma3server -name = server -config = modded.cfg -mod = @CBA_A3 \\; @ACE As per always, the script must be made executable: chmod +x <script_name>.sh","title":"Running the Server"},{"location":"game-servers/arma3/#headless-client","text":"A headless client is an instance of the game with no interface. The idea of having a headless client on a server is to reduce the load on the server process by taking control of the AI processing. This will (ideally) make the server run better and the AI more responsive since their processing will be done somewhere else, their reaction times will be much quicker. Setting up a headless client is a trivial task. The first thing that should be done is modify the server config ( .cfg file) to allow our headless client. In server.cfg (or whichever it is the name of your .cfg file), add or edit the following lines with the IP address of your headless client: headlessClients[] = {\"127.0.0.1\"}; localClient[] = {\"127.0.0.1\"}; Note In this case, our headless client will be running in the same machine as the server, which means that 127.0.0.1 will be used. You can add as many of these as you want. Once the server config allows the headless client, we'll create a run script to start the headless client. #!/bin/bash ./arma3server -client -connect = SERVER_IP -password = SERVER_PASSWORD -mod = @MOD1 \\; @MOD2... Note You can omit the password directive if the server you're connecting to has no password. You can also omit the mod directive if the server has no mods. Finally, make the script executable: chmod +x start_hc.sh Now you're ready. Start the server and then the headless client, which will connect directly and automatically offload the AI processing (if the mission implements headless clients properly).","title":"Headless Client"},{"location":"game-servers/arma3/#start-server-and-headless-client-script","text":"If you wish to run them both directly, you can create the following script: #!/bin/bash echo \"Launching server...\" screen -dmS arma3-server /bin/bash -c \"./start_antistasi.sh\" echo \"Launching Headless Client...\" screen -dmS arma3-hc /bin/bash -c \"./hc_antistasi.sh\" Note Replace \"./start_antistasi.sh\" with the name of the server start script and \"./hc_antistasi.sh\" with the name of the headless client start script. This will start both processes in two different screen windows. You can switch to them by using: screen -rd arma3-server screen -rd arma3-hc","title":"Start Server and Headless Client Script"},{"location":"game-servers/assetto-corsa/","text":"Assetto Corsa \u00b6 For this server we're going to approach two different alternatives: running the server directly from the Linux host or running it under a Windows VM. Each of these alternatives have their own pros and cons. Linux Binary Alternative \u00b6 Running the server directly with the Linux binary saves us a lot of disk space (almost 20GB since you don't need to install the game binaries) but will need to be configured manually through the server configs which can be a bit complicated when there is a lot of custom content and/or you use multiple configs for the server. Installation \u00b6 To install the Assetto Corsa dedicated server we'll need to start SteamCMD using a platform flag to set our platform as Windows , basically telling SteamCMD to download the Windows version of the packages we want to download. First we'll change to our steam user and go to where our SteamCMD is located. sudo -iu steam cd ~/Steam We'll run SteamCMD with the following argument: ./steamcmd.sh +@sSteamCmdForcePlatformType windows We can now login with our username, we'll be prompted for our password and two factor code if enabled. login <username> We'll change the installation folder: force_install_dir /home/steam/assettocorsa And now we download the required files. app_update 302550 Once we finish downloading we can exit SteamCMD and go to the folder where Assetto Corsa is installed. cd ~/assettocorsa Configuration \u00b6 The configuration of the server is pretty self-explanatory in terms of settings. To change the hostname, the track, the cars, etc.. Edit the following file: nano cfg/server_cfg.ini To change the car list: nano cfg/entry_list.ini For an easier way to create these configuration files I recommend you to use the Windows version of the server to generate these configs on a GUI window and then transfer the .ini files generated to the server. Make sure your ports are forwarded and that the firewall isn't blocking any connections Assetto Corsa may need, the server will not start up if it can't contact Assetto Corsa's main server. We'll add some firewall rules as a sudoer user (the administrator user for example): sudo ufw allow 8081/tcp sudo ufw allow 9600/tcp sudo ufw allow 9600/udp Note If you wish to run multiple servers or multiple configurations it is advised to reinstall the server in a different location and run a different acServer executable, after all, the server file size isn't too big. If you want to add mods to the server, you can get them from here , make sure to place them in the correct folder: ./content/cars or ./content/tracks , keep in mind the clients will also need the mods installed. Running the Server \u00b6 You can start up the server with: ./acServer Windows Virtual Machine Alternative \u00b6 The biggest downside of running the server through a Windows VM is the \"wasted\" disk space, since you need to count the Windows installation and the Assetto Corsa game binaries which both summed take around 40 GB. The great advantage that this has though, is the ease of configuration for custom content and multiple server configurations thanks to the nice server manager GUI. For this reason, I have opted for this option but you can always choose the one you prefer. Installing the Virtual Machine \u00b6 For the virtual machine we're going to use VirtualBox, I'm assuming you already have it installed but in case you haven't check this section of the guide . We're going to install Windows 7 Home Basic, we're going to give it 2GB or RAM, 60GB of disk space and access to 2 CPU cores. We're going to do this on the steam user, for this, we'll need to add the steam user to the vboxusers group. sudo adduser steam vboxusers Now, we'll change to the steam user. sudo -iu steam To set up the VM (make sure to change the settings to your needs): vboxmanage createvm --name \"Assetto-win\" --register vboxmanage modifyvm \"Assetto-win\" --memory 2048 --acpi on --ioapic on --boot1 dvd --nic1 bridged --bridgeadapter1 enp0s3 --nictype1 82540EM --vram 128 --cpus 2 --vrde on vboxmanage createhd --filename ~/VirtualBox\\ VMs/Assetto-win/assetto-win.vdi --size 100000 vboxmanage storagectl \"Assetto-win\" --name \"IDE Controller\" --add ide vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 0 --device 0 --type hdd --medium ~/VirtualBox\\ VMs/Assetto-win/assetto-win.vdi vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium ~/Downloads/Windows7.iso vboxheadless --startvm \u201cAssetto-win\u201d At this point, the VM should be successfully running, to control it, connect to the host's IP through an RDP connection (such as Microsoft Remote Desktop). Continue with the Windows installation process. Once the installation is complete, we'll install the VirtualBox Guest Additions, in the host, run the following command: vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium /usr/share/virtualbox/VBoxGuestAdditions.iso The installation drive should show up on My Computer , install it and restart the guest. Once rebooted and while the guest is running, type the following commands on the host: vboxmanage controlvm \"Assetto-win\" setvideomodehint 1280 720 32 vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium emptydrive Installing the Server \u00b6 To install the server we'll need to download SteamCMD and install .NET 4 Framework . For SteamCMD , we'll create a folder in our main drive C:\\steamcmd and we'll add this folder to our path: Open the Start Menu, right click My Computer and select Properties . On the left tab select Advanced system settings and click on Environment Variables... . On the Path variable, add the following: ;C:\\steamcmd . Now that SteamCMD is in our Path , we can easily run it through a command line prompt directly with the steamcmd command. We'll use a small bat script to download and update Assetto Corsa . Open up a notepad and save it as update_assetto.bat . Inside the text editor add the following text (make sure to replace your %username% with your actual username): @echo off steamcmd +login %username% +force_install_dir c: \\a ssettocorsa +app_update 244210 +quit Running this script will automatically download the server files. To run the server open up C:\\assettocorsa\\server\\acServerManager.exe and configure your server through the GUI. To add custom content, add it to the C:\\assettocorsa\\ directory.","title":"Assetto Corsa"},{"location":"game-servers/assetto-corsa/#assetto-corsa","text":"For this server we're going to approach two different alternatives: running the server directly from the Linux host or running it under a Windows VM. Each of these alternatives have their own pros and cons.","title":"Assetto Corsa"},{"location":"game-servers/assetto-corsa/#linux-binary-alternative","text":"Running the server directly with the Linux binary saves us a lot of disk space (almost 20GB since you don't need to install the game binaries) but will need to be configured manually through the server configs which can be a bit complicated when there is a lot of custom content and/or you use multiple configs for the server.","title":"Linux Binary Alternative"},{"location":"game-servers/assetto-corsa/#installation","text":"To install the Assetto Corsa dedicated server we'll need to start SteamCMD using a platform flag to set our platform as Windows , basically telling SteamCMD to download the Windows version of the packages we want to download. First we'll change to our steam user and go to where our SteamCMD is located. sudo -iu steam cd ~/Steam We'll run SteamCMD with the following argument: ./steamcmd.sh +@sSteamCmdForcePlatformType windows We can now login with our username, we'll be prompted for our password and two factor code if enabled. login <username> We'll change the installation folder: force_install_dir /home/steam/assettocorsa And now we download the required files. app_update 302550 Once we finish downloading we can exit SteamCMD and go to the folder where Assetto Corsa is installed. cd ~/assettocorsa","title":"Installation"},{"location":"game-servers/assetto-corsa/#configuration","text":"The configuration of the server is pretty self-explanatory in terms of settings. To change the hostname, the track, the cars, etc.. Edit the following file: nano cfg/server_cfg.ini To change the car list: nano cfg/entry_list.ini For an easier way to create these configuration files I recommend you to use the Windows version of the server to generate these configs on a GUI window and then transfer the .ini files generated to the server. Make sure your ports are forwarded and that the firewall isn't blocking any connections Assetto Corsa may need, the server will not start up if it can't contact Assetto Corsa's main server. We'll add some firewall rules as a sudoer user (the administrator user for example): sudo ufw allow 8081/tcp sudo ufw allow 9600/tcp sudo ufw allow 9600/udp Note If you wish to run multiple servers or multiple configurations it is advised to reinstall the server in a different location and run a different acServer executable, after all, the server file size isn't too big. If you want to add mods to the server, you can get them from here , make sure to place them in the correct folder: ./content/cars or ./content/tracks , keep in mind the clients will also need the mods installed.","title":"Configuration"},{"location":"game-servers/assetto-corsa/#running-the-server","text":"You can start up the server with: ./acServer","title":"Running the Server"},{"location":"game-servers/assetto-corsa/#windows-virtual-machine-alternative","text":"The biggest downside of running the server through a Windows VM is the \"wasted\" disk space, since you need to count the Windows installation and the Assetto Corsa game binaries which both summed take around 40 GB. The great advantage that this has though, is the ease of configuration for custom content and multiple server configurations thanks to the nice server manager GUI. For this reason, I have opted for this option but you can always choose the one you prefer.","title":"Windows Virtual Machine Alternative"},{"location":"game-servers/assetto-corsa/#installing-the-virtual-machine","text":"For the virtual machine we're going to use VirtualBox, I'm assuming you already have it installed but in case you haven't check this section of the guide . We're going to install Windows 7 Home Basic, we're going to give it 2GB or RAM, 60GB of disk space and access to 2 CPU cores. We're going to do this on the steam user, for this, we'll need to add the steam user to the vboxusers group. sudo adduser steam vboxusers Now, we'll change to the steam user. sudo -iu steam To set up the VM (make sure to change the settings to your needs): vboxmanage createvm --name \"Assetto-win\" --register vboxmanage modifyvm \"Assetto-win\" --memory 2048 --acpi on --ioapic on --boot1 dvd --nic1 bridged --bridgeadapter1 enp0s3 --nictype1 82540EM --vram 128 --cpus 2 --vrde on vboxmanage createhd --filename ~/VirtualBox\\ VMs/Assetto-win/assetto-win.vdi --size 100000 vboxmanage storagectl \"Assetto-win\" --name \"IDE Controller\" --add ide vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 0 --device 0 --type hdd --medium ~/VirtualBox\\ VMs/Assetto-win/assetto-win.vdi vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium ~/Downloads/Windows7.iso vboxheadless --startvm \u201cAssetto-win\u201d At this point, the VM should be successfully running, to control it, connect to the host's IP through an RDP connection (such as Microsoft Remote Desktop). Continue with the Windows installation process. Once the installation is complete, we'll install the VirtualBox Guest Additions, in the host, run the following command: vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium /usr/share/virtualbox/VBoxGuestAdditions.iso The installation drive should show up on My Computer , install it and restart the guest. Once rebooted and while the guest is running, type the following commands on the host: vboxmanage controlvm \"Assetto-win\" setvideomodehint 1280 720 32 vboxmanage storageattach \"Assetto-win\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium emptydrive","title":"Installing the Virtual Machine"},{"location":"game-servers/assetto-corsa/#installing-the-server","text":"To install the server we'll need to download SteamCMD and install .NET 4 Framework . For SteamCMD , we'll create a folder in our main drive C:\\steamcmd and we'll add this folder to our path: Open the Start Menu, right click My Computer and select Properties . On the left tab select Advanced system settings and click on Environment Variables... . On the Path variable, add the following: ;C:\\steamcmd . Now that SteamCMD is in our Path , we can easily run it through a command line prompt directly with the steamcmd command. We'll use a small bat script to download and update Assetto Corsa . Open up a notepad and save it as update_assetto.bat . Inside the text editor add the following text (make sure to replace your %username% with your actual username): @echo off steamcmd +login %username% +force_install_dir c: \\a ssettocorsa +app_update 244210 +quit Running this script will automatically download the server files. To run the server open up C:\\assettocorsa\\server\\acServerManager.exe and configure your server through the GUI. To add custom content, add it to the C:\\assettocorsa\\ directory.","title":"Installing the Server"},{"location":"game-servers/cstrike/","text":"Counter-Strike 1.6 \u00b6 Pre-Installation \u00b6 Before installing this server we will need to create a folder in steam 's Home directory. mkdir ~/.steam/sdk32 Head over to the directory where SteamCMD is located and copy steamclient.so from the linux32 folder to the folder we created previously. cp ~/Steam/linux32/steamclient.so ~/.steam/sdk32/ Installation \u00b6 To install this, start SteamCMD , login anonymously: login anonymous Run the following commands: force_install_dir /home/steam/cstrike app_update 90 Configuration \u00b6 Info This section is still under progress. AMX \u00b6 Installation \u00b6 To install plugins in your server you'll need AMX and Metamod which can be downloaded here . To install these, download the files inside the cstrike mod folder and extract them. cd ~/cstrike/cstrike wget https://www.amxmodx.org/release/metamod-1.21.1-am.zip wget https://www.amxmodx.org/release/amxmodx-1.8.2-base-linux.tar.gz wget https://www.amxmodx.org/release/amxmodx-1.8.2-cstrike-linux.tar.gz unzip metamod-1.21.1-am.zip tar -xvf amxmodx-1.8.2-cstrike-linux.tar.gz tar -xvf amxmodx-1.8.2-base-linux.tar.gz rm metamod-1.21.1-am.zip amxmodx-1.8.2-base-linux.tar.gz amxmodx-1.8.2-cstrike-linux.tar.gz Now we have to add the corresponding dlls to the liblist.gam : nano liblist.gam Inside the editor, replace the following line: gamedll_linux \"dlls/xxx.so To: gamedll_linux \"addons/metamod/dlls/metamod.so\" Close and save the file, we'll need to edit another file now. nano addons/metamod/plugins.ini Inside it, write the following line: linux addons/amxmodx/dlls/amxmodx_mm_i386.so AMX is now installed. We need to make ourselves admin, for this edit the following file: nano addons/amxmodx/configs/users.ini And add the following line: \"STEAM:O:1:23456789\" \"\" \"abcdefghijklmnopqrstu\" \"ce\" Replace STEAM:0:1:23456789 with your * STEAMID32 which you can find here . Adding Plugins \u00b6 Info This section is still under progress. Running the Server \u00b6 To run the server, simply launch hlds_run from the cstrike folder with the required parameters. ./hlds_run -game cstrike +maxplayers 20 +map de_dust2","title":"Counter-Strike 1.6"},{"location":"game-servers/cstrike/#counter-strike-16","text":"","title":"Counter-Strike 1.6"},{"location":"game-servers/cstrike/#pre-installation","text":"Before installing this server we will need to create a folder in steam 's Home directory. mkdir ~/.steam/sdk32 Head over to the directory where SteamCMD is located and copy steamclient.so from the linux32 folder to the folder we created previously. cp ~/Steam/linux32/steamclient.so ~/.steam/sdk32/","title":"Pre-Installation"},{"location":"game-servers/cstrike/#installation","text":"To install this, start SteamCMD , login anonymously: login anonymous Run the following commands: force_install_dir /home/steam/cstrike app_update 90","title":"Installation"},{"location":"game-servers/cstrike/#configuration","text":"Info This section is still under progress.","title":"Configuration"},{"location":"game-servers/cstrike/#amx","text":"","title":"AMX"},{"location":"game-servers/cstrike/#installation_1","text":"To install plugins in your server you'll need AMX and Metamod which can be downloaded here . To install these, download the files inside the cstrike mod folder and extract them. cd ~/cstrike/cstrike wget https://www.amxmodx.org/release/metamod-1.21.1-am.zip wget https://www.amxmodx.org/release/amxmodx-1.8.2-base-linux.tar.gz wget https://www.amxmodx.org/release/amxmodx-1.8.2-cstrike-linux.tar.gz unzip metamod-1.21.1-am.zip tar -xvf amxmodx-1.8.2-cstrike-linux.tar.gz tar -xvf amxmodx-1.8.2-base-linux.tar.gz rm metamod-1.21.1-am.zip amxmodx-1.8.2-base-linux.tar.gz amxmodx-1.8.2-cstrike-linux.tar.gz Now we have to add the corresponding dlls to the liblist.gam : nano liblist.gam Inside the editor, replace the following line: gamedll_linux \"dlls/xxx.so To: gamedll_linux \"addons/metamod/dlls/metamod.so\" Close and save the file, we'll need to edit another file now. nano addons/metamod/plugins.ini Inside it, write the following line: linux addons/amxmodx/dlls/amxmodx_mm_i386.so AMX is now installed. We need to make ourselves admin, for this edit the following file: nano addons/amxmodx/configs/users.ini And add the following line: \"STEAM:O:1:23456789\" \"\" \"abcdefghijklmnopqrstu\" \"ce\" Replace STEAM:0:1:23456789 with your * STEAMID32 which you can find here .","title":"Installation"},{"location":"game-servers/cstrike/#adding-plugins","text":"Info This section is still under progress.","title":"Adding Plugins"},{"location":"game-servers/cstrike/#running-the-server","text":"To run the server, simply launch hlds_run from the cstrike folder with the required parameters. ./hlds_run -game cstrike +maxplayers 20 +map de_dust2","title":"Running the Server"},{"location":"game-servers/dm-classic/","text":"Deathmatch Classic \u00b6 Installation \u00b6 Before installing, make sure you follow the Pre-Installation section from Counter-Strike 1.6 . To install this server, open SteamCMD , login anonymously and run the following commands: force_install_dir /home/steam/dmc app_set_config 90 mod dmc app_update 90 validate Configuration \u00b6 Info This section is still under progress. AMX \u00b6 Installation \u00b6 To install plugins in your server you'll need AMX and Metamod which can be downloaded here . To install these, download the files inside the dmc mod folder and extract them. cd ~/dmc/dmc wget https://www.amxmodx.org/release/metamod-1.21.1-am.zip wget https://www.amxmodx.org/release/amxmodx-1.8.2-base-linux.tar.gz unzip metamod-1.21.1-am.zip tar -xvf amxmodx-1.8.2-base-linux.tar.gz rm metamod-1.21.1-am.zip amxmodx-1.8.2-base-linux.tar.gz Now we have to add the corresponding dlls to the liblist.gam : nano liblist.gam Inside the editor, replace the following line: gamedll_linux \"dlls/xxx.so To: gamedll_linux \"addons/metamod/dlls/metamod.so\" Close and save the file, we'll need to edit another file now. nano addons/metamod/plugins.ini Inside it, write the following line: linux addons/amxmodx/dlls/amxmodx_mm_i386.so AMX is now installed. We need to make ourselves admin, for this edit the following file: nano addons/amxmodx/configs/users.ini And add the following line: \"STEAM:O:1:23456789\" \"\" \"abcdefghijklmnopqrstu\" \"ce\" Replace STEAM:0:1:23456789 with your * STEAMID32 which you can find here . Adding Plugins \u00b6 Info This section is still under progress. Running the Server \u00b6 To run the server, simply launch hlds_run from the dmc folder with the required parameters. ./hlds_run -game dmc +maxplayers 10 +map dmc_dm2","title":"Deathmatch Classic"},{"location":"game-servers/dm-classic/#deathmatch-classic","text":"","title":"Deathmatch Classic"},{"location":"game-servers/dm-classic/#installation","text":"Before installing, make sure you follow the Pre-Installation section from Counter-Strike 1.6 . To install this server, open SteamCMD , login anonymously and run the following commands: force_install_dir /home/steam/dmc app_set_config 90 mod dmc app_update 90 validate","title":"Installation"},{"location":"game-servers/dm-classic/#configuration","text":"Info This section is still under progress.","title":"Configuration"},{"location":"game-servers/dm-classic/#amx","text":"","title":"AMX"},{"location":"game-servers/dm-classic/#installation_1","text":"To install plugins in your server you'll need AMX and Metamod which can be downloaded here . To install these, download the files inside the dmc mod folder and extract them. cd ~/dmc/dmc wget https://www.amxmodx.org/release/metamod-1.21.1-am.zip wget https://www.amxmodx.org/release/amxmodx-1.8.2-base-linux.tar.gz unzip metamod-1.21.1-am.zip tar -xvf amxmodx-1.8.2-base-linux.tar.gz rm metamod-1.21.1-am.zip amxmodx-1.8.2-base-linux.tar.gz Now we have to add the corresponding dlls to the liblist.gam : nano liblist.gam Inside the editor, replace the following line: gamedll_linux \"dlls/xxx.so To: gamedll_linux \"addons/metamod/dlls/metamod.so\" Close and save the file, we'll need to edit another file now. nano addons/metamod/plugins.ini Inside it, write the following line: linux addons/amxmodx/dlls/amxmodx_mm_i386.so AMX is now installed. We need to make ourselves admin, for this edit the following file: nano addons/amxmodx/configs/users.ini And add the following line: \"STEAM:O:1:23456789\" \"\" \"abcdefghijklmnopqrstu\" \"ce\" Replace STEAM:0:1:23456789 with your * STEAMID32 which you can find here .","title":"Installation"},{"location":"game-servers/dm-classic/#adding-plugins","text":"Info This section is still under progress.","title":"Adding Plugins"},{"location":"game-servers/dm-classic/#running-the-server","text":"To run the server, simply launch hlds_run from the dmc folder with the required parameters. ./hlds_run -game dmc +maxplayers 10 +map dmc_dm2","title":"Running the Server"},{"location":"game-servers/fastdl/","text":"FastDL \u00b6 Info As a disclaimer, FastDL is only available for Source game servers. Meaning that only the following games (that are in this guide) can use FastDL : Counter-Strike 1.6 Deathmatch Classic No More Room in Hell Left 4 Dead 2 FastDL is a way to host your custom content for your game servers, it delivers the custom content that your server requires to run properly to connecting players. To accomplish this, FastDL requires an webserver where the content can be stored and accessed. When multiple users join at the same time it can require a lot of bandwidth, for this reason we will use a free hosting solution instead of self-hosting it ourselves, in this case we will use 000webhhost . 000webhost offers 10GB of bandwidth, 1GB of storage and 400 requests-per-minute for free, which is more than enough for a simple FastDL host. Setting Up Hosting \u00b6 Firstly, create an account at 000webhost . Then, create a site, give it a name that will be easy for you to remember since it will be your web link ( sitename.000webhostapp.com ), set again a password for this site that is secure but that you don't use. Danger Make sure you don't use a password that you generally use since this service is fairly unreliable and has endured many security breaches (it's still worth it for something as trivial as FastDL ). Uploading Content \u00b6 After that, use an FTP client (Filezilla and WinSCP are very good). Connect to your site with the following info: Server IP : files.000webhost.com User : The site name that you chose previously. Password : The password that you chose previously. Port : 21 Inside you'll find a folder called public_html , access it and create a folder for each of your games. Inside each folder you should create the following folder structure for Source games: <source_gamename> \u2502 \u2514\u2500\u2500\u2500maps | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500materials | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500models | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500resource | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500sound | | file.example | | ... For GoldSrc games: <goldsrc_gamename> \u2502 \u2514\u2500\u2500\u2500gfx | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500maps | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500models | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500resource | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500sound | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500sprites | | file.example | | ... After uploading all your content to your FTP server, head over to the server.cfg for the corresponding game and add the following lines to it: sv_allowdownload 1 sv_allowupload 1 sv_downloadurl \"https://<sitename>.000webhostapp.com/<gamename>/\" Now every time a player connects to your server and needs to download the required content they'll download it through the FastDL instead of the server, putting less strain on the game server this way.","title":"FastDL"},{"location":"game-servers/fastdl/#fastdl","text":"Info As a disclaimer, FastDL is only available for Source game servers. Meaning that only the following games (that are in this guide) can use FastDL : Counter-Strike 1.6 Deathmatch Classic No More Room in Hell Left 4 Dead 2 FastDL is a way to host your custom content for your game servers, it delivers the custom content that your server requires to run properly to connecting players. To accomplish this, FastDL requires an webserver where the content can be stored and accessed. When multiple users join at the same time it can require a lot of bandwidth, for this reason we will use a free hosting solution instead of self-hosting it ourselves, in this case we will use 000webhhost . 000webhost offers 10GB of bandwidth, 1GB of storage and 400 requests-per-minute for free, which is more than enough for a simple FastDL host.","title":"FastDL"},{"location":"game-servers/fastdl/#setting-up-hosting","text":"Firstly, create an account at 000webhost . Then, create a site, give it a name that will be easy for you to remember since it will be your web link ( sitename.000webhostapp.com ), set again a password for this site that is secure but that you don't use. Danger Make sure you don't use a password that you generally use since this service is fairly unreliable and has endured many security breaches (it's still worth it for something as trivial as FastDL ).","title":"Setting Up Hosting"},{"location":"game-servers/fastdl/#uploading-content","text":"After that, use an FTP client (Filezilla and WinSCP are very good). Connect to your site with the following info: Server IP : files.000webhost.com User : The site name that you chose previously. Password : The password that you chose previously. Port : 21 Inside you'll find a folder called public_html , access it and create a folder for each of your games. Inside each folder you should create the following folder structure for Source games: <source_gamename> \u2502 \u2514\u2500\u2500\u2500maps | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500materials | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500models | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500resource | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500sound | | file.example | | ... For GoldSrc games: <goldsrc_gamename> \u2502 \u2514\u2500\u2500\u2500gfx | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500maps | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500models | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500resource | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500sound | | file.example | | ... \u2502 \u2514\u2500\u2500\u2500sprites | | file.example | | ... After uploading all your content to your FTP server, head over to the server.cfg for the corresponding game and add the following lines to it: sv_allowdownload 1 sv_allowupload 1 sv_downloadurl \"https://<sitename>.000webhostapp.com/<gamename>/\" Now every time a player connects to your server and needs to download the required content they'll download it through the FastDL instead of the server, putting less strain on the game server this way.","title":"Uploading Content"},{"location":"game-servers/left4dead2/","text":"Left 4 Dead 2 \u00b6 Installation \u00b6 To install this server, open SteamCMD , login anonymously and run the following commands: force_install_dir /home/steam/l4d2 app_update 222860 Configuration \u00b6 To configure the server you'll need to create a server.cfg file inside the left4dead2/cfg folder. You can add the minimum settings: hostname \"SERVER_NAME\" rcon_password \"SECRET\" sv_allow_lobby_connect_only 0 mp_disable_autokick 1 sv_alltalk 1 sv_consistency 0 sv_voiceenable 1 sv_region 255 sv_logbans 1 sv_lan 0 sv_pure 0 sv_cheats 0 sv_steamgroup STEAM_GROUP_ID sv_gametypes \"coop,survival\" exec banned_user.cfg exec banned_ip.cfg writeid writeip sv_maxcmdrate 0 sv_maxupdaterate 0 sv_minrate 25000 sv_maxrate 50000 Sourcemod \u00b6 Installation \u00b6 In order to use plugins on your server you'll need Sourcemod and Metamod , to install these, head over to the Sourcemod and Metamod download sites and download the latest version inside the mod folder of the game server that you want to install it on (in this case /home/steam/l4d2/left4dead2 ). cd /home/steam/l4d2/left4dead2 wget https://sm.alliedmods.net/smdrop/1.9/sourcemod-1.9.0-git6272-linux.tar.gz wget https://mms.alliedmods.net/mmsdrop/1.10/mmsource-1.10.7-git968-linux.tar.gz Untar the downloaded files and delete them. tar -xvf sourcemod-1.9.0-git6272-linux.tar.gz tar -xvf mmsource-1.10.7-git968-linux.tar.gz rm mmsource-1.10.7-git968-linux.tar.gz sourcemod-1.9.0-git6272-linux.tar.gz At this point, Sourcemod and Metamod are both installed, but before we head into the server, we'll set our account as admin. From the same directory, open the following file: nano addons/sourcemod/configs/admins_simple.ini At the bottom, you'll need to append your STEAMID32 ID , (which you can find here ) with the following tag 99:z , your file should end with a line similar to the following: STEAM_0:1:23456789 99:z Adding Plugins \u00b6 Info This section is still under progress. Running the Server \u00b6 To run the server, simply launch srcds_run from the l4d2 folder with the required parameters. ./srcds_run -console -game left4dead2 -maxplayers 8 +sv_lan 0 +map c5m1_waterfront","title":"Left 4 Dead 2"},{"location":"game-servers/left4dead2/#left-4-dead-2","text":"","title":"Left 4 Dead 2"},{"location":"game-servers/left4dead2/#installation","text":"To install this server, open SteamCMD , login anonymously and run the following commands: force_install_dir /home/steam/l4d2 app_update 222860","title":"Installation"},{"location":"game-servers/left4dead2/#configuration","text":"To configure the server you'll need to create a server.cfg file inside the left4dead2/cfg folder. You can add the minimum settings: hostname \"SERVER_NAME\" rcon_password \"SECRET\" sv_allow_lobby_connect_only 0 mp_disable_autokick 1 sv_alltalk 1 sv_consistency 0 sv_voiceenable 1 sv_region 255 sv_logbans 1 sv_lan 0 sv_pure 0 sv_cheats 0 sv_steamgroup STEAM_GROUP_ID sv_gametypes \"coop,survival\" exec banned_user.cfg exec banned_ip.cfg writeid writeip sv_maxcmdrate 0 sv_maxupdaterate 0 sv_minrate 25000 sv_maxrate 50000","title":"Configuration"},{"location":"game-servers/left4dead2/#sourcemod","text":"","title":"Sourcemod"},{"location":"game-servers/left4dead2/#installation_1","text":"In order to use plugins on your server you'll need Sourcemod and Metamod , to install these, head over to the Sourcemod and Metamod download sites and download the latest version inside the mod folder of the game server that you want to install it on (in this case /home/steam/l4d2/left4dead2 ). cd /home/steam/l4d2/left4dead2 wget https://sm.alliedmods.net/smdrop/1.9/sourcemod-1.9.0-git6272-linux.tar.gz wget https://mms.alliedmods.net/mmsdrop/1.10/mmsource-1.10.7-git968-linux.tar.gz Untar the downloaded files and delete them. tar -xvf sourcemod-1.9.0-git6272-linux.tar.gz tar -xvf mmsource-1.10.7-git968-linux.tar.gz rm mmsource-1.10.7-git968-linux.tar.gz sourcemod-1.9.0-git6272-linux.tar.gz At this point, Sourcemod and Metamod are both installed, but before we head into the server, we'll set our account as admin. From the same directory, open the following file: nano addons/sourcemod/configs/admins_simple.ini At the bottom, you'll need to append your STEAMID32 ID , (which you can find here ) with the following tag 99:z , your file should end with a line similar to the following: STEAM_0:1:23456789 99:z","title":"Installation"},{"location":"game-servers/left4dead2/#adding-plugins","text":"Info This section is still under progress.","title":"Adding Plugins"},{"location":"game-servers/left4dead2/#running-the-server","text":"To run the server, simply launch srcds_run from the l4d2 folder with the required parameters. ./srcds_run -console -game left4dead2 -maxplayers 8 +sv_lan 0 +map c5m1_waterfront","title":"Running the Server"},{"location":"game-servers/minecraft/","text":"Minecraft \u00b6 Installing Requirements \u00b6 The following installs a vanilla Minecraft server, if you're looking for a modded server you'll have to look up Forge or CraftBukkit guides. Minecraft as we know requires Oracle Java in order to run. Ubuntu does not come with Java installed nor is it available on the default package repos, so we'll need to add a PPA repo and install it from there, just do the following: sudo apt-add-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer Installation \u00b6 After installing Oracle Java, we're ready to install a Minecraft server. We'll change to our steam user since it's dedicated to our game servers. We'll also create a folder specifically for it. sudo -iu steam cd ~ mkdir minecraft && cd minecraft Head over to the official Minecraft website to download the newest Minecraft server executable and start it up (the example below may be outdated). wget https://launcher.mojang.com/mc/game/1.13/server/d0caafb8438ebd206f99930cfaecfa6c9a13dca0/server.jar java -Xms2G -Xmx2G -jar server.jar nogui Info Replace the first two arguments with the amount of RAM you want to dedicate for the Minecraft server. If everything went well, the server closed itself and a little eula.txt file was generated in the server's directory. We need to edit that file to accept the EULA agreement. nano eula.txt Change the last line to: eula=true Now fire up the server again and stop it once it finishes loading up. java -Xms2G -Xmx2G -jar server.jar nogui stop Configuration \u00b6 Now that all the required files have been generated, we can continue to set up our server's configuration. nano server.properties All the settings here are pretty much self explanatory but there's one that I'm going to address and it's online-mode . This setting tells the Minecraft server whether it should connect to the Minecraft.net servers to check if all the users connecting have a Minecraft Premium account and download their respective skins. This option is generally set to true , but if we have friends that do not have Minecraft Premium they'll be able to join our server if we set online-mode=false , keep in mind that everyone's skins will be set to default and anyone that joins through a 3rd-party launcher may be able to change their name anytime (risking identity theft or ban avoidance). Remember, we need to allow connections through the firewall (you may need to change to an user that has access to the sudo command, i.e you main administrator user): sudo ufw allow 25565/tcp We'll now create a script to run the server a lot easier. Create a file running: nano start.sh Paste the following: #!/bin/bash java -Xms2G -Xmx2G -jar server.jar nogui Make it executable: chmod +x start.sh Running the Server \u00b6 You can now start the server just by running the start script. ./start.sh","title":"Minecraft"},{"location":"game-servers/minecraft/#minecraft","text":"","title":"Minecraft"},{"location":"game-servers/minecraft/#installing-requirements","text":"The following installs a vanilla Minecraft server, if you're looking for a modded server you'll have to look up Forge or CraftBukkit guides. Minecraft as we know requires Oracle Java in order to run. Ubuntu does not come with Java installed nor is it available on the default package repos, so we'll need to add a PPA repo and install it from there, just do the following: sudo apt-add-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer","title":"Installing Requirements"},{"location":"game-servers/minecraft/#installation","text":"After installing Oracle Java, we're ready to install a Minecraft server. We'll change to our steam user since it's dedicated to our game servers. We'll also create a folder specifically for it. sudo -iu steam cd ~ mkdir minecraft && cd minecraft Head over to the official Minecraft website to download the newest Minecraft server executable and start it up (the example below may be outdated). wget https://launcher.mojang.com/mc/game/1.13/server/d0caafb8438ebd206f99930cfaecfa6c9a13dca0/server.jar java -Xms2G -Xmx2G -jar server.jar nogui Info Replace the first two arguments with the amount of RAM you want to dedicate for the Minecraft server. If everything went well, the server closed itself and a little eula.txt file was generated in the server's directory. We need to edit that file to accept the EULA agreement. nano eula.txt Change the last line to: eula=true Now fire up the server again and stop it once it finishes loading up. java -Xms2G -Xmx2G -jar server.jar nogui stop","title":"Installation"},{"location":"game-servers/minecraft/#configuration","text":"Now that all the required files have been generated, we can continue to set up our server's configuration. nano server.properties All the settings here are pretty much self explanatory but there's one that I'm going to address and it's online-mode . This setting tells the Minecraft server whether it should connect to the Minecraft.net servers to check if all the users connecting have a Minecraft Premium account and download their respective skins. This option is generally set to true , but if we have friends that do not have Minecraft Premium they'll be able to join our server if we set online-mode=false , keep in mind that everyone's skins will be set to default and anyone that joins through a 3rd-party launcher may be able to change their name anytime (risking identity theft or ban avoidance). Remember, we need to allow connections through the firewall (you may need to change to an user that has access to the sudo command, i.e you main administrator user): sudo ufw allow 25565/tcp We'll now create a script to run the server a lot easier. Create a file running: nano start.sh Paste the following: #!/bin/bash java -Xms2G -Xmx2G -jar server.jar nogui Make it executable: chmod +x start.sh","title":"Configuration"},{"location":"game-servers/minecraft/#running-the-server","text":"You can now start the server just by running the start script. ./start.sh","title":"Running the Server"},{"location":"game-servers/nmrih/","text":"No More Room in Hell \u00b6 Installation \u00b6 To install this server, open SteamCMD , login with your account and run the following commands: force_install_dir /home/steam/nmrih app_update 317670 We'll also need a small dependency, which can be installed with: sudo apt-get install lib32tinfo5 Right after the installation completes, change to the directory where No More Room in Hell is installed and add the following symlinks. cd /home/steam/nmrih/bin ln -s soundemittersystem_srv.so soundemittersystem.so ln -s scenefilecache_srv.so scenefilecache.so Configuration \u00b6 To configure the server you'll need to create a server.cfg file inside the nmrih/cfg . You can add the minimum settings: hostname \"SERVER_NAME\" rcon_password \"SECRET\" sv_tags \"TAGS_HERE\" sv_lan 0 sv_cheats 0 sv_region -1 sv_voiceenable 1 sv_alltalk 1 mapcyclefile \"mapcycle.txt\" sv_allowupload 1 sv_allowdownload 1 net_maxfilesize 64 sv_minrate 0 sv_maxrate 60000 sv_minupdaterate 0 sv_maxupdaterate 66 sv_timeout 30 exec banned_user.cfg exec banned_ip.cfg writeid writeip Sourcemod \u00b6 Installation \u00b6 In order to use plugins on your server you'll need Sourcemod and Metamod , to install these, head over to the Sourcemod and Metamod download sites and download the latest version inside the mod folder of the game server that you want to install it on (in this case /home/steam/nmrih/nmrih ). cd /home/steam/nmrih/nmrih wget https://sm.alliedmods.net/smdrop/1.9/sourcemod-1.9.0-git6272-linux.tar.gz wget https://mms.alliedmods.net/mmsdrop/1.10/mmsource-1.10.7-git968-linux.tar.gz Untar the downloaded files and delete them. tar -xvf sourcemod-1.9.0-git6272-linux.tar.gz tar -xvf mmsource-1.10.7-git968-linux.tar.gz rm mmsource-1.10.7-git968-linux.tar.gz sourcemod-1.9.0-git6272-linux.tar.gz At this point, Sourcemod and Metamod are both installed, but before we head into the server, we'll set our account as admin. From the same directory, open the following file: nano addons/sourcemod/configs/admins_simple.ini At the bottom, you'll need to append your STEAMID32 ID , (which you can find here ) with the following tag 99:z , your file should end with a line similar to the following: STEAM_0:1:23456789 99:z Adding Plugins \u00b6 Info This section is still under progress. Running the Server \u00b6 To run the server, simply launch srcds_run from the nmrih folder with the required parameters. ./srcds_run -console -game nmrih -maxplayers 8 +sv_lan 0 +map nms_favela","title":"No More Room in Hell"},{"location":"game-servers/nmrih/#no-more-room-in-hell","text":"","title":"No More Room in Hell"},{"location":"game-servers/nmrih/#installation","text":"To install this server, open SteamCMD , login with your account and run the following commands: force_install_dir /home/steam/nmrih app_update 317670 We'll also need a small dependency, which can be installed with: sudo apt-get install lib32tinfo5 Right after the installation completes, change to the directory where No More Room in Hell is installed and add the following symlinks. cd /home/steam/nmrih/bin ln -s soundemittersystem_srv.so soundemittersystem.so ln -s scenefilecache_srv.so scenefilecache.so","title":"Installation"},{"location":"game-servers/nmrih/#configuration","text":"To configure the server you'll need to create a server.cfg file inside the nmrih/cfg . You can add the minimum settings: hostname \"SERVER_NAME\" rcon_password \"SECRET\" sv_tags \"TAGS_HERE\" sv_lan 0 sv_cheats 0 sv_region -1 sv_voiceenable 1 sv_alltalk 1 mapcyclefile \"mapcycle.txt\" sv_allowupload 1 sv_allowdownload 1 net_maxfilesize 64 sv_minrate 0 sv_maxrate 60000 sv_minupdaterate 0 sv_maxupdaterate 66 sv_timeout 30 exec banned_user.cfg exec banned_ip.cfg writeid writeip","title":"Configuration"},{"location":"game-servers/nmrih/#sourcemod","text":"","title":"Sourcemod"},{"location":"game-servers/nmrih/#installation_1","text":"In order to use plugins on your server you'll need Sourcemod and Metamod , to install these, head over to the Sourcemod and Metamod download sites and download the latest version inside the mod folder of the game server that you want to install it on (in this case /home/steam/nmrih/nmrih ). cd /home/steam/nmrih/nmrih wget https://sm.alliedmods.net/smdrop/1.9/sourcemod-1.9.0-git6272-linux.tar.gz wget https://mms.alliedmods.net/mmsdrop/1.10/mmsource-1.10.7-git968-linux.tar.gz Untar the downloaded files and delete them. tar -xvf sourcemod-1.9.0-git6272-linux.tar.gz tar -xvf mmsource-1.10.7-git968-linux.tar.gz rm mmsource-1.10.7-git968-linux.tar.gz sourcemod-1.9.0-git6272-linux.tar.gz At this point, Sourcemod and Metamod are both installed, but before we head into the server, we'll set our account as admin. From the same directory, open the following file: nano addons/sourcemod/configs/admins_simple.ini At the bottom, you'll need to append your STEAMID32 ID , (which you can find here ) with the following tag 99:z , your file should end with a line similar to the following: STEAM_0:1:23456789 99:z","title":"Installation"},{"location":"game-servers/nmrih/#adding-plugins","text":"Info This section is still under progress.","title":"Adding Plugins"},{"location":"game-servers/nmrih/#running-the-server","text":"To run the server, simply launch srcds_run from the nmrih folder with the required parameters. ./srcds_run -console -game nmrih -maxplayers 8 +sv_lan 0 +map nms_favela","title":"Running the Server"},{"location":"game-servers/ports/","text":"Game Server Ports \u00b6 Here's a list of the ports used by the game servers currently installed on the server. Game Service: Port: Other: Arma 3 2302 Assetto Corsa 9600 QueryPort: 8081 Deathmatch Classic 27015 Left 4 Dead 2 27020 Minecraft 25565 No More Room in Hell 27025 Sven-Coop 27030 TeamSpeak 3 9987 Valheim 2456","title":"Game Server Ports"},{"location":"game-servers/ports/#game-server-ports","text":"Here's a list of the ports used by the game servers currently installed on the server. Game Service: Port: Other: Arma 3 2302 Assetto Corsa 9600 QueryPort: 8081 Deathmatch Classic 27015 Left 4 Dead 2 27020 Minecraft 25565 No More Room in Hell 27025 Sven-Coop 27030 TeamSpeak 3 9987 Valheim 2456","title":"Game Server Ports"},{"location":"game-servers/screeps/","text":"Screeps \u00b6 Installing Requirements \u00b6 The following game server requires Node.js , in order to install it, we'll run the following commands: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs Apart from Node.js we will also need the basic Build Essentials and Python . sudo apt-get install build-essential python Some changes were done in the way that npm works which broke this package alongside others. Luckily, you can install this with yarn which can fully replace npm . To install this, we'll need to configure the repository: curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Then, we update our repositories and install yarn . sudo apt-get update && sudo apt-get install yarn Installation \u00b6 To install Screeps , we will switch to our steam user where we store our game servers and we'll create a folder in our home directory. sudo -iu steam mkdir screeps && cd screeps Here we can install Screeps . yarn add screeps Before starting the server, we will need a Steam Web API Key , head over to this link , copy it to your clipboard and paste it when it's required. npx screeps init After doing this you can now start the server. npx screeps start As per usual, we will need to add some firewall rules (as a sudoer): sudo ufw allow 21025/tcp","title":"Screeps"},{"location":"game-servers/screeps/#screeps","text":"","title":"Screeps"},{"location":"game-servers/screeps/#installing-requirements","text":"The following game server requires Node.js , in order to install it, we'll run the following commands: curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash - sudo apt-get install nodejs Apart from Node.js we will also need the basic Build Essentials and Python . sudo apt-get install build-essential python Some changes were done in the way that npm works which broke this package alongside others. Luckily, you can install this with yarn which can fully replace npm . To install this, we'll need to configure the repository: curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list Then, we update our repositories and install yarn . sudo apt-get update && sudo apt-get install yarn","title":"Installing Requirements"},{"location":"game-servers/screeps/#installation","text":"To install Screeps , we will switch to our steam user where we store our game servers and we'll create a folder in our home directory. sudo -iu steam mkdir screeps && cd screeps Here we can install Screeps . yarn add screeps Before starting the server, we will need a Steam Web API Key , head over to this link , copy it to your clipboard and paste it when it's required. npx screeps init After doing this you can now start the server. npx screeps start As per usual, we will need to add some firewall rules (as a sudoer): sudo ufw allow 21025/tcp","title":"Installation"},{"location":"game-servers/steamcmd/","text":"SteamCMD \u00b6 In this part we'll install SteamCMD which is a headless Steam client that lets us install Dedicated server packages without even the need to login (some exceptions apply). Installation \u00b6 Before installing this tool, we'll create a new user, just to better organize ourselves. sudo adduser --disabled-login steam sudo -iu steam Since the steam user's home folder is empty, we'll make a folder for SteamCMD. mkdir steamcmd && cd steamcmd Now we proceed with the download and extraction. wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz tar zxvf steamcmd_linux.tar.gz && rm steamcmd_linux.tar.gz That's it, you can start up SteamCMD with: ./steamcmd.sh Usage \u00b6 First and foremost, when using SteamCMD you'll need to login, whether it is to your account or to an anonymous account (which is basically the same as logging in to an empty user). login anonymous login <username> Note Use either one, prefer anonymous over your username when possible, keep in mind that some packages require a license for your account, meaning that certain game servers can only be downloaded if you have said game in your Steam library. When inserting your username you'll be prompted to enter your password and your Steam guard code in case you have 2 factor security enabled. When downloading a package, it is often recommended to save it in a separate folder for better organization. force_install_dir <path> To download a package, you'll need it's AppID, a list of Dedicated sever AppIDs can be found here . app_update <app_id> validate Server Updating \u00b6 I made a small bash script to help myself update these servers, you can check it out here . Script Installation \u00b6 Unzip the content of the file inside the directory where SteamCMD is installed. Also, make the script executable with: chmod +x update.sh Script Usage \u00b6 To run the updater, use: ./update.sh server_name username If the username is empty, the script will run with anonymous as the username. The server_name should correspond to a file inside the ./scripts folder. Keep in mind that the script takes into account that the username in which the server is installed is steam , if this is different for you you're free to change the script to suit your needs.","title":"SteamCMD"},{"location":"game-servers/steamcmd/#steamcmd","text":"In this part we'll install SteamCMD which is a headless Steam client that lets us install Dedicated server packages without even the need to login (some exceptions apply).","title":"SteamCMD"},{"location":"game-servers/steamcmd/#installation","text":"Before installing this tool, we'll create a new user, just to better organize ourselves. sudo adduser --disabled-login steam sudo -iu steam Since the steam user's home folder is empty, we'll make a folder for SteamCMD. mkdir steamcmd && cd steamcmd Now we proceed with the download and extraction. wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz tar zxvf steamcmd_linux.tar.gz && rm steamcmd_linux.tar.gz That's it, you can start up SteamCMD with: ./steamcmd.sh","title":"Installation"},{"location":"game-servers/steamcmd/#usage","text":"First and foremost, when using SteamCMD you'll need to login, whether it is to your account or to an anonymous account (which is basically the same as logging in to an empty user). login anonymous login <username> Note Use either one, prefer anonymous over your username when possible, keep in mind that some packages require a license for your account, meaning that certain game servers can only be downloaded if you have said game in your Steam library. When inserting your username you'll be prompted to enter your password and your Steam guard code in case you have 2 factor security enabled. When downloading a package, it is often recommended to save it in a separate folder for better organization. force_install_dir <path> To download a package, you'll need it's AppID, a list of Dedicated sever AppIDs can be found here . app_update <app_id> validate","title":"Usage"},{"location":"game-servers/steamcmd/#server-updating","text":"I made a small bash script to help myself update these servers, you can check it out here .","title":"Server Updating"},{"location":"game-servers/steamcmd/#script-installation","text":"Unzip the content of the file inside the directory where SteamCMD is installed. Also, make the script executable with: chmod +x update.sh","title":"Script Installation"},{"location":"game-servers/steamcmd/#script-usage","text":"To run the updater, use: ./update.sh server_name username If the username is empty, the script will run with anonymous as the username. The server_name should correspond to a file inside the ./scripts folder. Keep in mind that the script takes into account that the username in which the server is installed is steam , if this is different for you you're free to change the script to suit your needs.","title":"Script Usage"},{"location":"game-servers/valheim/","text":"Valheim \u00b6 Installation \u00b6 To install a Valheim server, change to the steam user with: sudo -iu steam Then, inside the folder where SteamCMD is installed, run SteamCMD, then login with your account: login <username> Once you've entered your password and 2FA code, change the directory where the Valheim server will be installed. force_install_dir /home/steam/valheim Then, install Valheim . app_update 896660 Configuration \u00b6 Inside the folder where Valheim is installed, create a file called start.sh and add the following: export templdpath=$LD_LIBRARY_PATH export LD_LIBRARY_PATH=./linux64:$LD_LIBRARY_PATH export SteamAppId=892970 echo \"Starting server PRESS CTRL-C to exit\" ./valheim_server.x86_64 -name \"<Server Name>\" -port 2456 -world \"world\" -password \"<Server Password>\" export LD_LIBRARY_PATH=$templdpath Note Replace <Server Name> and <Server Password> with your own. Make the script executable with: chmod +x start.sh Firewall Rules \u00b6 You will need to allow some ports in UFW, run the following: sudo ufw allow 2456:2457/tcp sudo ufw allow 2456:2457/udp Running the Server \u00b6 Lastly, to run the server, just run the start script. ./start.sh","title":"Valheim"},{"location":"game-servers/valheim/#valheim","text":"","title":"Valheim"},{"location":"game-servers/valheim/#installation","text":"To install a Valheim server, change to the steam user with: sudo -iu steam Then, inside the folder where SteamCMD is installed, run SteamCMD, then login with your account: login <username> Once you've entered your password and 2FA code, change the directory where the Valheim server will be installed. force_install_dir /home/steam/valheim Then, install Valheim . app_update 896660","title":"Installation"},{"location":"game-servers/valheim/#configuration","text":"Inside the folder where Valheim is installed, create a file called start.sh and add the following: export templdpath=$LD_LIBRARY_PATH export LD_LIBRARY_PATH=./linux64:$LD_LIBRARY_PATH export SteamAppId=892970 echo \"Starting server PRESS CTRL-C to exit\" ./valheim_server.x86_64 -name \"<Server Name>\" -port 2456 -world \"world\" -password \"<Server Password>\" export LD_LIBRARY_PATH=$templdpath Note Replace <Server Name> and <Server Password> with your own. Make the script executable with: chmod +x start.sh","title":"Configuration"},{"location":"game-servers/valheim/#firewall-rules","text":"You will need to allow some ports in UFW, run the following: sudo ufw allow 2456:2457/tcp sudo ufw allow 2456:2457/udp","title":"Firewall Rules"},{"location":"game-servers/valheim/#running-the-server","text":"Lastly, to run the server, just run the start script. ./start.sh","title":"Running the Server"},{"location":"services/gitea/","text":"Gitea (Git Server) \u00b6 Gitea is a very good Git server that lets you host and mirror your Git repositories, its interface is very similar to GitHub's and it's very lightweight. Installation \u00b6 Initial Setup \u00b6 For a better organization, we'll create an user for Gitea : sudo adduser --disabled-login git Since we'll do the initial setup from an external machine, we'll open the port 3000 to access the web interface. sudo ufw allow 3000/tcp Database Creation \u00b6 Also, Gitea will require a database, for this, we'll use PostgreSQL . To install it, run: sudo apt-get install postgresql This will create a user called postgres , we'll need to change to that user and run PostgreSQL : sudo su postgres psql Inside here, we'll run the commands to create the database: CREATE USER gitea WITH PASSWORD '$password' ; CREATE DATABASE gitea OWNER gitea ; \\ q Note Replace $password with the actual password for your database. Gitea Install \u00b6 Change to the git user and create a gitea folder inside its home directory. sudo -iu git mkdir ~/gitea && cd ~/gitea We can now download the Gitea binary (to this date, the latest version is 1.8.1 ) and make it executable. wget -O gitea https://dl.gitea.io/gitea/1.8.1/gitea-1.8.1-linux-amd64 chmod +x gitea To start Gitea , simply run: ./gitea web Configuration \u00b6 To access Gitea , open up an Internet browser and go to the IP of the machine that's hosting the service with the port 3000 . You'll be greeted with a configuration webpage which will do the initial configuration for you. After it's done, you should be able to create new users and access the Gitea interface. Creating a Service \u00b6 We want Gitea to run on system startup, for this, we'll create a systemd service: sudo nano /etc/systemd/system/gitea.service Paste the following inside the text editor (assuming you named the Gitea user git ). [ Unit ] Description = Gitea After = syslog.target After = network.target After = postgresql.service [ Service ] RestartSec = 2s Type = simple User = git Group = git WorkingDirectory = /home/git/gitea ExecStart = /home/git/gitea/gitea web Restart = always Environment = USER = git HOME = /home/git [ Install ] WantedBy = multi-user.target We can now initialize this service with: sudo systemd enable gitea.service sudo systemd start gitea.service Using nginx and Server Names \u00b6 We'll use nginx to host the service. Since we have other web services running on the server, we can use ' virtual hosts ' to define that we want to access to Gitea through http://git.domain.com without the need to specify the port. Installing nginx \u00b6 To install nginx , run: sudo apt-get install nginx Configuring Virtual Host \u00b6 To configure the virtual host , create a gitea configuration file with the following command: sudo nano /etc/nginx/sites-enabled/gitea Inside the text editor, paste the following: server { listen 80; server_name <your-domain>; client_max_body_size 100M; location / { proxy_pass http://localhost:3000; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note Replace <your-domain> with the actual domain that you want to use to access Gitea . We'll now remove the default configuration and restart nginx : sudo rm /etc/nginx/sites-enabled/default sudo service nginx reload Gitea Manual Configuration \u00b6 While the Gitea web configuration is pretty good, we still need to manually change certain things from the configuration file like the domain through which you access Gitea . To do this, change to the git user and edit the configuration file: sudo -iu git nano ~/gitea/custom/app.ini Change the DOMAIN and SSH_DOMAIN directives to the domain that you use to access Gitea . Change ROOT_URL to https://domain.com Change DISABLE_SSH to true . Changing The Favicon \u00b6 To change the favicon of the site, create the following folder: mkdir -p ~/gitea/custom/public/img In here, paste the image that you want to use as the favicon and rename it to favicon.png . Using Fail2Ban \u00b6 Fail2Ban is security measure that temporarily IP bans the clients that have failed to login more than 10 times. Installing Fail2Ban \u00b6 To install it, simply run: sudo apt-get install fail2ban Configuring Fail2Ban \u00b6 We need to create a filter first. sudo nano /etc/fail2ban/filter.d/gitea.conf Inside the text editor, paste the following: [Definition] failregex = .*Failed authentication attempt for .* from <HOST> ignoreregex = We now need to create the jail definition. sudo nano /etc/fail2ban/jail.d/jail.local Inside the text editor, paste the following: [gitea] enabled = true port = http,https filter = gitea logpath = /home/git/gitea/log/gitea.log maxretry = 10 findtime = 3600 bantime = 900 action = iptables-allports Now, restart the Fail2Ban service. sudo service fail2ban restart Creating HTTPS Certificates \u00b6 Since we want to use HTTPS to access our Gitea service, we'll need some certificates. Luckily, we can use certbot to do the following. Installing Certbot \u00b6 To install certbot , run the following: sudo apt-get install software-properties-common sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install python-certbot-nginx Using Certbot \u00b6 To run certbot , use the following command: sudo certbot --nginx You'll be prompted with some of your information such as email address, the domain that you need HTTPS for and whether you want to enable HTTP to HTTPS redirection (which I recommend you enable it). Setting a Cronjob \u00b6 Since the certificate only lasts for about 10 days, we'll need to renew periodically. For this, we'll create a systemd timer and set it to run everyday. Create the service file with: sudo nano /etc/systemd/system/certbot-renewal.service And paste the following on the text editor: [ Unit ] Description = Certbot Renewal [ Service ] ExecStart = /usr/bin/certbot renew Now, create the timer file with: sudo nano /etc/systemd/system/certbot-renewal.timer And paste the following on the editor: [ Unit ] Description = Timer for Certbot Renewal [ Timer ] OnBootSec = 300 OnUnitActiveSec = 1d [ Install ] WantedBy = multi-user.target Enable the timer with: sudo systemctl enable certbot-renewal.timer sudo systemctl start certbot-renewal.timer","title":"Gitea"},{"location":"services/gitea/#gitea-git-server","text":"Gitea is a very good Git server that lets you host and mirror your Git repositories, its interface is very similar to GitHub's and it's very lightweight.","title":"Gitea (Git Server)"},{"location":"services/gitea/#installation","text":"","title":"Installation"},{"location":"services/gitea/#initial-setup","text":"For a better organization, we'll create an user for Gitea : sudo adduser --disabled-login git Since we'll do the initial setup from an external machine, we'll open the port 3000 to access the web interface. sudo ufw allow 3000/tcp","title":"Initial Setup"},{"location":"services/gitea/#database-creation","text":"Also, Gitea will require a database, for this, we'll use PostgreSQL . To install it, run: sudo apt-get install postgresql This will create a user called postgres , we'll need to change to that user and run PostgreSQL : sudo su postgres psql Inside here, we'll run the commands to create the database: CREATE USER gitea WITH PASSWORD '$password' ; CREATE DATABASE gitea OWNER gitea ; \\ q Note Replace $password with the actual password for your database.","title":"Database Creation"},{"location":"services/gitea/#gitea-install","text":"Change to the git user and create a gitea folder inside its home directory. sudo -iu git mkdir ~/gitea && cd ~/gitea We can now download the Gitea binary (to this date, the latest version is 1.8.1 ) and make it executable. wget -O gitea https://dl.gitea.io/gitea/1.8.1/gitea-1.8.1-linux-amd64 chmod +x gitea To start Gitea , simply run: ./gitea web","title":"Gitea Install"},{"location":"services/gitea/#configuration","text":"To access Gitea , open up an Internet browser and go to the IP of the machine that's hosting the service with the port 3000 . You'll be greeted with a configuration webpage which will do the initial configuration for you. After it's done, you should be able to create new users and access the Gitea interface.","title":"Configuration"},{"location":"services/gitea/#creating-a-service","text":"We want Gitea to run on system startup, for this, we'll create a systemd service: sudo nano /etc/systemd/system/gitea.service Paste the following inside the text editor (assuming you named the Gitea user git ). [ Unit ] Description = Gitea After = syslog.target After = network.target After = postgresql.service [ Service ] RestartSec = 2s Type = simple User = git Group = git WorkingDirectory = /home/git/gitea ExecStart = /home/git/gitea/gitea web Restart = always Environment = USER = git HOME = /home/git [ Install ] WantedBy = multi-user.target We can now initialize this service with: sudo systemd enable gitea.service sudo systemd start gitea.service","title":"Creating a Service"},{"location":"services/gitea/#using-nginx-and-server-names","text":"We'll use nginx to host the service. Since we have other web services running on the server, we can use ' virtual hosts ' to define that we want to access to Gitea through http://git.domain.com without the need to specify the port.","title":"Using nginx and Server Names"},{"location":"services/gitea/#installing-nginx","text":"To install nginx , run: sudo apt-get install nginx","title":"Installing nginx"},{"location":"services/gitea/#configuring-virtual-host","text":"To configure the virtual host , create a gitea configuration file with the following command: sudo nano /etc/nginx/sites-enabled/gitea Inside the text editor, paste the following: server { listen 80; server_name <your-domain>; client_max_body_size 100M; location / { proxy_pass http://localhost:3000; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note Replace <your-domain> with the actual domain that you want to use to access Gitea . We'll now remove the default configuration and restart nginx : sudo rm /etc/nginx/sites-enabled/default sudo service nginx reload","title":"Configuring Virtual Host"},{"location":"services/gitea/#gitea-manual-configuration","text":"While the Gitea web configuration is pretty good, we still need to manually change certain things from the configuration file like the domain through which you access Gitea . To do this, change to the git user and edit the configuration file: sudo -iu git nano ~/gitea/custom/app.ini Change the DOMAIN and SSH_DOMAIN directives to the domain that you use to access Gitea . Change ROOT_URL to https://domain.com Change DISABLE_SSH to true .","title":"Gitea Manual Configuration"},{"location":"services/gitea/#changing-the-favicon","text":"To change the favicon of the site, create the following folder: mkdir -p ~/gitea/custom/public/img In here, paste the image that you want to use as the favicon and rename it to favicon.png .","title":"Changing The Favicon"},{"location":"services/gitea/#using-fail2ban","text":"Fail2Ban is security measure that temporarily IP bans the clients that have failed to login more than 10 times.","title":"Using Fail2Ban"},{"location":"services/gitea/#installing-fail2ban","text":"To install it, simply run: sudo apt-get install fail2ban","title":"Installing Fail2Ban"},{"location":"services/gitea/#configuring-fail2ban","text":"We need to create a filter first. sudo nano /etc/fail2ban/filter.d/gitea.conf Inside the text editor, paste the following: [Definition] failregex = .*Failed authentication attempt for .* from <HOST> ignoreregex = We now need to create the jail definition. sudo nano /etc/fail2ban/jail.d/jail.local Inside the text editor, paste the following: [gitea] enabled = true port = http,https filter = gitea logpath = /home/git/gitea/log/gitea.log maxretry = 10 findtime = 3600 bantime = 900 action = iptables-allports Now, restart the Fail2Ban service. sudo service fail2ban restart","title":"Configuring Fail2Ban"},{"location":"services/gitea/#creating-https-certificates","text":"Since we want to use HTTPS to access our Gitea service, we'll need some certificates. Luckily, we can use certbot to do the following.","title":"Creating HTTPS Certificates"},{"location":"services/gitea/#installing-certbot","text":"To install certbot , run the following: sudo apt-get install software-properties-common sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install python-certbot-nginx","title":"Installing Certbot"},{"location":"services/gitea/#using-certbot","text":"To run certbot , use the following command: sudo certbot --nginx You'll be prompted with some of your information such as email address, the domain that you need HTTPS for and whether you want to enable HTTP to HTTPS redirection (which I recommend you enable it).","title":"Using Certbot"},{"location":"services/gitea/#setting-a-cronjob","text":"Since the certificate only lasts for about 10 days, we'll need to renew periodically. For this, we'll create a systemd timer and set it to run everyday. Create the service file with: sudo nano /etc/systemd/system/certbot-renewal.service And paste the following on the text editor: [ Unit ] Description = Certbot Renewal [ Service ] ExecStart = /usr/bin/certbot renew Now, create the timer file with: sudo nano /etc/systemd/system/certbot-renewal.timer And paste the following on the editor: [ Unit ] Description = Timer for Certbot Renewal [ Timer ] OnBootSec = 300 OnUnitActiveSec = 1d [ Install ] WantedBy = multi-user.target Enable the timer with: sudo systemctl enable certbot-renewal.timer sudo systemctl start certbot-renewal.timer","title":"Setting a Cronjob"},{"location":"services/lidarr/","text":"Lidarr \u00b6 Lidarr is an RSS Downloader focused on music, it'll help automate music downloads. Requirements \u00b6 Before installing Lidarr , we'll need to install Mono which is a C# Runtime for Linux. Run the following commands to install Mono : sudo apt-get install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt-get update sudo apt-get install mono-devel Installation \u00b6 The Lidarr installation is reduced to the following commands: curl -L -O $( curl -s https://api.github.com/repos/lidarr/Lidarr/releases | grep linux.tar.gz | grep browser_download_url | head -1 | cut -d \\\" -f 4 ) tar -xvzf Lidarr.master.*.linux.tar.gz sudo mv Lidarr /opt And finally, we'll create a lidarr user and group to manage Lidarr : sudo addgroup lidarr && sudo adduser --system lidarr --ingroup lidarr sudo chown lidarr:lidarr -R /opt/Lidarr Starting Lidarr \u00b6 To start Lidarr , run the following command: mono --debug /opt/Lidarr/Lidarr.exe The web service should be available at http://localhost:8686 . Autostarting Lidarr \u00b6 To autostart Lidarr , we need to create a service file. sudo nano /etc/systemd/system/lidarr.service And paste the following in the editor: [ Unit ] Description = Lidarr Daemon After = network.target [ Service ] User = lidarr Group = lidarr ExecStart = /usr/bin/mono --debug /opt/Lidarr/Lidarr.exe -nobrowser TimeoutStopSec = 20 KillMode = process Restart = on-failure [ Install ] WantedBy = multi-user.target Exit, save and enable and start the service. sudo systemctl enable lidarr.service sudo systemctl start lidarr.service Using a Server Name to Access Lidarr \u00b6 If you wish to access Lidarr through a specific domain, you will need to use some sort of reverse proxy. From the previous sections, where we installed Gitea , we created a domain that would be used to accessed Gitea . In this case, we we'll create a media subdomain on our domain to access Lidarr through https://media.domain.com/lidarr . Installing nginx \u00b6 If you haven't installed nginx , run: sudo apt-get install nginx Configuring Virtual Host \u00b6 We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/media And we'll paste the following: server { listen 80; server_name <your-domain>; location /lidarr { proxy_pass http://localhost:8686; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note If you followed the guide for Sonarr , just add the location directive. Note Replace <your-domain> with the actual domain that you want to use to access Lidarr . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service After setting-up the reverse proxy, we must also set the base URL for Lidarr to work properly. Run the following command: sudo nano /home/lidarr/.config/Lidarr/config.xml And inside, look for the line: <UrlBase></UrlBase> And change it to: <UrlBase> /lidarr </UrlBase> HTTPS Certificate \u00b6 If you have certbot installed and configured already, you can enable HTTPS for Lidarr with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"Lidarr"},{"location":"services/lidarr/#lidarr","text":"Lidarr is an RSS Downloader focused on music, it'll help automate music downloads.","title":"Lidarr"},{"location":"services/lidarr/#requirements","text":"Before installing Lidarr , we'll need to install Mono which is a C# Runtime for Linux. Run the following commands to install Mono : sudo apt-get install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt-get update sudo apt-get install mono-devel","title":"Requirements"},{"location":"services/lidarr/#installation","text":"The Lidarr installation is reduced to the following commands: curl -L -O $( curl -s https://api.github.com/repos/lidarr/Lidarr/releases | grep linux.tar.gz | grep browser_download_url | head -1 | cut -d \\\" -f 4 ) tar -xvzf Lidarr.master.*.linux.tar.gz sudo mv Lidarr /opt And finally, we'll create a lidarr user and group to manage Lidarr : sudo addgroup lidarr && sudo adduser --system lidarr --ingroup lidarr sudo chown lidarr:lidarr -R /opt/Lidarr","title":"Installation"},{"location":"services/lidarr/#starting-lidarr","text":"To start Lidarr , run the following command: mono --debug /opt/Lidarr/Lidarr.exe The web service should be available at http://localhost:8686 .","title":"Starting Lidarr"},{"location":"services/lidarr/#autostarting-lidarr","text":"To autostart Lidarr , we need to create a service file. sudo nano /etc/systemd/system/lidarr.service And paste the following in the editor: [ Unit ] Description = Lidarr Daemon After = network.target [ Service ] User = lidarr Group = lidarr ExecStart = /usr/bin/mono --debug /opt/Lidarr/Lidarr.exe -nobrowser TimeoutStopSec = 20 KillMode = process Restart = on-failure [ Install ] WantedBy = multi-user.target Exit, save and enable and start the service. sudo systemctl enable lidarr.service sudo systemctl start lidarr.service","title":"Autostarting Lidarr"},{"location":"services/lidarr/#using-a-server-name-to-access-lidarr","text":"If you wish to access Lidarr through a specific domain, you will need to use some sort of reverse proxy. From the previous sections, where we installed Gitea , we created a domain that would be used to accessed Gitea . In this case, we we'll create a media subdomain on our domain to access Lidarr through https://media.domain.com/lidarr .","title":"Using a Server Name to Access Lidarr"},{"location":"services/lidarr/#installing-nginx","text":"If you haven't installed nginx , run: sudo apt-get install nginx","title":"Installing nginx"},{"location":"services/lidarr/#configuring-virtual-host","text":"We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/media And we'll paste the following: server { listen 80; server_name <your-domain>; location /lidarr { proxy_pass http://localhost:8686; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note If you followed the guide for Sonarr , just add the location directive. Note Replace <your-domain> with the actual domain that you want to use to access Lidarr . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service After setting-up the reverse proxy, we must also set the base URL for Lidarr to work properly. Run the following command: sudo nano /home/lidarr/.config/Lidarr/config.xml And inside, look for the line: <UrlBase></UrlBase> And change it to: <UrlBase> /lidarr </UrlBase>","title":"Configuring Virtual Host"},{"location":"services/lidarr/#https-certificate","text":"If you have certbot installed and configured already, you can enable HTTPS for Lidarr with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"HTTPS Certificate"},{"location":"services/no-ip/","text":"NO-IP DUC \u00b6 NO-IP DUC is a client that maps and updates the public IP of your server to a NO-IP host. This is particularly useful if you want to have a free hostname instead of having to use your IP directly or if your public IP is not static (which is the case for most people). For this you obviously need a NO-IP account, you can create one here . Installation \u00b6 To install this just follow this chain of commands: cd /usr/local/src/ sudo wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz sudo tar xf noip-duc-linux.tar.gz cd noip-2.1.9-1/ sudo make install cd .. && sudo rm -rf noip* This last command will ask for your login and password for the NO-IP site, it'll then ask you which of your hosts you want to update and in which interval. Auto-starting \u00b6 We finally need to create a systemctl service so it can autostart on system boot. We make the service file with: sudo nano /etc/systemd/system/noip2.service Add the following text to the editor and save the file. [ Unit ] Description = No-IP Dynamic DNS Update Client After = network.target [ Service ] Type = forking ExecStart = /usr/local/bin/noip2 [ Install ] WantedBy = multi-user.target Lastly, to enable the service: systemctl daemon-reload systemctl enable noip2.service systemctl start noip2.service","title":"NO-IP DUC"},{"location":"services/no-ip/#no-ip-duc","text":"NO-IP DUC is a client that maps and updates the public IP of your server to a NO-IP host. This is particularly useful if you want to have a free hostname instead of having to use your IP directly or if your public IP is not static (which is the case for most people). For this you obviously need a NO-IP account, you can create one here .","title":"NO-IP DUC"},{"location":"services/no-ip/#installation","text":"To install this just follow this chain of commands: cd /usr/local/src/ sudo wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz sudo tar xf noip-duc-linux.tar.gz cd noip-2.1.9-1/ sudo make install cd .. && sudo rm -rf noip* This last command will ask for your login and password for the NO-IP site, it'll then ask you which of your hosts you want to update and in which interval.","title":"Installation"},{"location":"services/no-ip/#auto-starting","text":"We finally need to create a systemctl service so it can autostart on system boot. We make the service file with: sudo nano /etc/systemd/system/noip2.service Add the following text to the editor and save the file. [ Unit ] Description = No-IP Dynamic DNS Update Client After = network.target [ Service ] Type = forking ExecStart = /usr/local/bin/noip2 [ Install ] WantedBy = multi-user.target Lastly, to enable the service: systemctl daemon-reload systemctl enable noip2.service systemctl start noip2.service","title":"Auto-starting"},{"location":"services/openvpn/","text":"OpenVPN \u00b6 This section of the guide will focus on installing a VPN service in the server. This process can be a little bit tedious and even complicated, it is all explained here step by step. Installation \u00b6 We'll install two packages and make a folder. sudo apt-get install openvpn easy-rsa make-cadir ~/openvpn-ca cd ~/openvpn-ca Setting Up and Building Certificate Authority \u00b6 We'll change the certificate authority variables. nano vars Change the following information according to your needs, I recommend you leaving KEY_NAME as \"server\" . export KEY_COUNTRY=\"US\" export KEY_PROVINCE=\"CA\" export KEY_CITY=\"SanFrancisco\" export KEY_ORG=\"Fort-Funston\" export KEY_EMAIL=\"me@myhost.mydomain\" export KEY_OU=\"MyOrganizationalUnit\" export KEY_NAME=\"server\" We source the variables now and clean our environment. source vars ./clean-all ln -s openssl-1.0.0.cnf openssl.cnf We can now build our certificate authority (hit enter for everything, leave any challenge password blank). ./build-ca Building Server Certificate, Key and Encryption \u00b6 We now need to generate our server and Diffie-Hellman keys and our HMAC signature (leave blank when asked for challenge password). ./build-key-server server BLANK PASS ./build-dh openvpn --genkey --secret keys/ta.key Configuring the VPN Server \u00b6 We'll transfer the server keys and certificates generated previously to /etc/openvpn . cd keys sudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn Now we'll create a server configuration file, you can look up for server configurations, base yourself from the default one or just copy my own. If you want to base yourself from the default one, run: gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf Since I already know what settings I'm going to need for the VPN server, I'll directly create the server configuration. sudo nano /etc/openvpn/server.conf My own configuration goes as follows: local 0.0.0.0 port 1194 proto udp dev tun ca ca.crt cert server.crt key server.key dh dh2048.pem server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt keepalive 10 60 cipher AES-256-CBC comp-lzo max-clients 20 persist-key persist-tun status openvpn-status.log verb 3 client-to-client tls-auth ta.key key-direction 0 auth SHA256 user nobody group nogroup # ROUTE push \"remote-gateway def1\" push \"dhcp-option DNS 8.8.8.8\" push \"dhcp-option DNS 8.8.4.4\" Allow IP Forwarding \u00b6 In order for the server to forward inbound VPN connections to the main network interface the server uses, we'll need to set up IP forwarding. Access the following file: sudo nano /etc/sysctl.conf Uncomment the following line: net.ipv4.ip_forward=1 To see if changes were made, run: sudo sysctl -p Now, we need to know what is our main network interface, you can use: ifconfig You'll receive a similar output: enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.0.15 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 ::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x0<global> inet6 fe80::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x20<link> ether 08:00:27:49:85:61 txqueuelen 1000 (Ethernet) RX packets 755025 bytes 1132393073 (1.1 GB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 94785 bytes 9330879 (9.3 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 The network interface is the first word you see in the output (in this case enp0s3 ), save it for later because we'll need it. Edit the UFW rules from the config file: sudo nano /etc/ufw/before.rules Inside this file you'll see the following: # # rules.before # # Rules that should be run before the ufw command line added rules. Custom # rules should be added to one of these chains: # ufw-before-input # ufw-before-output # ufw-before-forward # Just after these lines we'll add the following: # START OPENVPN RULES # NAT table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from OpenVPN client to enp0s3 (change to the interface you discovered!) -A POSTROUTING -s 10.8.0.0/8 -o enp0s3 -j MASQUERADE COMMIT # END OPENVPN RULES We also need to change UFW's configuration. sudo nano /etc/default/ufw Here we'll replace DEFAULT_FORWARD_POLICY=\"DROP\" to DEFAULT_FORWARD_POLICY=\"ACCEPT\" and save the file. Now to add the firewall rules to enable connections to the VPN and allow any connection through the VPN: sudo ufw allow 1194/udp sudo ufw allow in on tun0 sudo ufw allow out on tun0 Starting the Server \u00b6 The server is ready to start (make sure to replace server with whatever server name you used when creating the server keys): sudo systemctl start openvpn@server If there were no issues you'll be able to see a new interface called tun0 when using ifconfig . If that isn't the case then most likely your server configuration is causing issues. To enable the service so the server auto-starts on login: sudo systemctl enable openvpn@server Creating a Client Base Configuration \u00b6 The server isn't ready yet, we still need to create client keys, certificates and profiles. To make this job a lot easier we'll create a base configuration which is going to serve as the base for all clients generated and we'll create a client generating script. For the base configuration we'll create some folders and the base configuration itself. mkdir -p ~/client-configs/files chmod 700 ~/client-configs/files cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf nano ~/client-configs/base.conf In the text editor you'll see that a configuration is already there, we'll need to make some changes in there to suit our needs. Firstly, look for remote server_IP_address 1194 and change server_IP_address to your server's external IP address, you can add your numerical IP address (xxx.xxx.xxx.xxx) only if it's static, if that's not your case I recommend you checking out the following: NO-IP DUC . We'll now uncomment the following items: user nobody , group nogroup and comp-lzo . Now we need to comment the following items: ca ca.crt , cert client.crt and key client.key . We need to add the following in a separate line: cipher AES-256-CBC , auth SHA256 and key-direction 1 . Save and quit the file. Client Generating Script \u00b6 Create a script in the ~/client-configs folder: nano ~/client-configs/make_config.sh Paste the following in the text editor: #!/bin/bash # First argument: Client identifier KEY_DIR = ~/openvpn-ca/keys OUTPUT_DIR = ~/client-configs/files BASE_CONFIG = ~/client-configs/base.conf cat ${ BASE_CONFIG } \\ < ( echo -e '<ca>' ) \\ ${ KEY_DIR } /ca.crt \\ < ( echo -e '</ca>\\n<cert>' ) \\ ${ KEY_DIR } / ${ 1 } .crt \\ < ( echo -e '</cert>\\n<key>' ) \\ ${ KEY_DIR } / ${ 1 } .key \\ < ( echo -e '</key>\\n<tls-auth>' ) \\ ${ KEY_DIR } /ta.key \\ < ( echo -e '</tls-auth>' ) \\ > ${ OUTPUT_DIR } / ${ 1 } .ovpn To make the following script executable: chmod 700 ~/client-configs/make_config.sh Creating Keys, Certificates and Profiles for Clients \u00b6 You'll need to repeat this process for every client that will use the VPN, client profiles are not interchangeable, meaning that each client needs to use it's own generated profile and set of keys, trying to use a single profile for multiple devices will result in issues when connecting to the VPN. We'll go to the ~/openvpn-ca folder where all our keys are saved and source our variables. cd ~/openvpn-ca source vars For every client, run the following, make sure to change $CLIENT with the client name and remember to set a blank challenge password: ./build-key $CLIENT Once we've generated all the client keys and certificates we need, we'll go back to the folder where our script is located and run it for every client we made. cd ~/client-configs ./make_config.sh $CLIENT Our client profiles will be saved in the ./files folder. Tunnel all traffic through the VPN \u00b6 My VPN configuration requires me to have two profiles, one where I can connect to my self-hosted services through a VPN and one where I can route all my traffic through the VPN. To route all the traffic to the VPN, simply copy your client profile and add the following line to the config: redirect-gateway def1 Connecting to the VPN \u00b6 To connect to the VPN your client device will need OpenVPN installed, you can find it for almost any platform. You'll need to transfer from the server to the client device their respective profile: ~/client-configs/files/$CLIENT.ovpn and the ta.key file ~/openvpn-ca/keys/ta.key (this seems to be only required on mobile clients but chances are your desktop client may need it as well). When connecting to the VPN, the client will receive it's own virtual private IP ( 10.8.0.x ), the server's IP is generally 10.8.0.1 . You can now establish connections to the server that are not port forwarded by the router (Samba/CIFS for example).","title":"OpenVPN"},{"location":"services/openvpn/#openvpn","text":"This section of the guide will focus on installing a VPN service in the server. This process can be a little bit tedious and even complicated, it is all explained here step by step.","title":"OpenVPN"},{"location":"services/openvpn/#installation","text":"We'll install two packages and make a folder. sudo apt-get install openvpn easy-rsa make-cadir ~/openvpn-ca cd ~/openvpn-ca","title":"Installation"},{"location":"services/openvpn/#setting-up-and-building-certificate-authority","text":"We'll change the certificate authority variables. nano vars Change the following information according to your needs, I recommend you leaving KEY_NAME as \"server\" . export KEY_COUNTRY=\"US\" export KEY_PROVINCE=\"CA\" export KEY_CITY=\"SanFrancisco\" export KEY_ORG=\"Fort-Funston\" export KEY_EMAIL=\"me@myhost.mydomain\" export KEY_OU=\"MyOrganizationalUnit\" export KEY_NAME=\"server\" We source the variables now and clean our environment. source vars ./clean-all ln -s openssl-1.0.0.cnf openssl.cnf We can now build our certificate authority (hit enter for everything, leave any challenge password blank). ./build-ca","title":"Setting Up and Building Certificate Authority"},{"location":"services/openvpn/#building-server-certificate-key-and-encryption","text":"We now need to generate our server and Diffie-Hellman keys and our HMAC signature (leave blank when asked for challenge password). ./build-key-server server BLANK PASS ./build-dh openvpn --genkey --secret keys/ta.key","title":"Building Server Certificate, Key and Encryption"},{"location":"services/openvpn/#configuring-the-vpn-server","text":"We'll transfer the server keys and certificates generated previously to /etc/openvpn . cd keys sudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn Now we'll create a server configuration file, you can look up for server configurations, base yourself from the default one or just copy my own. If you want to base yourself from the default one, run: gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf Since I already know what settings I'm going to need for the VPN server, I'll directly create the server configuration. sudo nano /etc/openvpn/server.conf My own configuration goes as follows: local 0.0.0.0 port 1194 proto udp dev tun ca ca.crt cert server.crt key server.key dh dh2048.pem server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt keepalive 10 60 cipher AES-256-CBC comp-lzo max-clients 20 persist-key persist-tun status openvpn-status.log verb 3 client-to-client tls-auth ta.key key-direction 0 auth SHA256 user nobody group nogroup # ROUTE push \"remote-gateway def1\" push \"dhcp-option DNS 8.8.8.8\" push \"dhcp-option DNS 8.8.4.4\"","title":"Configuring the VPN Server"},{"location":"services/openvpn/#allow-ip-forwarding","text":"In order for the server to forward inbound VPN connections to the main network interface the server uses, we'll need to set up IP forwarding. Access the following file: sudo nano /etc/sysctl.conf Uncomment the following line: net.ipv4.ip_forward=1 To see if changes were made, run: sudo sysctl -p Now, we need to know what is our main network interface, you can use: ifconfig You'll receive a similar output: enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.0.15 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 ::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x0<global> inet6 fe80::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x20<link> ether 08:00:27:49:85:61 txqueuelen 1000 (Ethernet) RX packets 755025 bytes 1132393073 (1.1 GB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 94785 bytes 9330879 (9.3 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 The network interface is the first word you see in the output (in this case enp0s3 ), save it for later because we'll need it. Edit the UFW rules from the config file: sudo nano /etc/ufw/before.rules Inside this file you'll see the following: # # rules.before # # Rules that should be run before the ufw command line added rules. Custom # rules should be added to one of these chains: # ufw-before-input # ufw-before-output # ufw-before-forward # Just after these lines we'll add the following: # START OPENVPN RULES # NAT table rules *nat :POSTROUTING ACCEPT [0:0] # Allow traffic from OpenVPN client to enp0s3 (change to the interface you discovered!) -A POSTROUTING -s 10.8.0.0/8 -o enp0s3 -j MASQUERADE COMMIT # END OPENVPN RULES We also need to change UFW's configuration. sudo nano /etc/default/ufw Here we'll replace DEFAULT_FORWARD_POLICY=\"DROP\" to DEFAULT_FORWARD_POLICY=\"ACCEPT\" and save the file. Now to add the firewall rules to enable connections to the VPN and allow any connection through the VPN: sudo ufw allow 1194/udp sudo ufw allow in on tun0 sudo ufw allow out on tun0","title":"Allow IP Forwarding"},{"location":"services/openvpn/#starting-the-server","text":"The server is ready to start (make sure to replace server with whatever server name you used when creating the server keys): sudo systemctl start openvpn@server If there were no issues you'll be able to see a new interface called tun0 when using ifconfig . If that isn't the case then most likely your server configuration is causing issues. To enable the service so the server auto-starts on login: sudo systemctl enable openvpn@server","title":"Starting the Server"},{"location":"services/openvpn/#creating-a-client-base-configuration","text":"The server isn't ready yet, we still need to create client keys, certificates and profiles. To make this job a lot easier we'll create a base configuration which is going to serve as the base for all clients generated and we'll create a client generating script. For the base configuration we'll create some folders and the base configuration itself. mkdir -p ~/client-configs/files chmod 700 ~/client-configs/files cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf nano ~/client-configs/base.conf In the text editor you'll see that a configuration is already there, we'll need to make some changes in there to suit our needs. Firstly, look for remote server_IP_address 1194 and change server_IP_address to your server's external IP address, you can add your numerical IP address (xxx.xxx.xxx.xxx) only if it's static, if that's not your case I recommend you checking out the following: NO-IP DUC . We'll now uncomment the following items: user nobody , group nogroup and comp-lzo . Now we need to comment the following items: ca ca.crt , cert client.crt and key client.key . We need to add the following in a separate line: cipher AES-256-CBC , auth SHA256 and key-direction 1 . Save and quit the file.","title":"Creating a Client Base Configuration"},{"location":"services/openvpn/#client-generating-script","text":"Create a script in the ~/client-configs folder: nano ~/client-configs/make_config.sh Paste the following in the text editor: #!/bin/bash # First argument: Client identifier KEY_DIR = ~/openvpn-ca/keys OUTPUT_DIR = ~/client-configs/files BASE_CONFIG = ~/client-configs/base.conf cat ${ BASE_CONFIG } \\ < ( echo -e '<ca>' ) \\ ${ KEY_DIR } /ca.crt \\ < ( echo -e '</ca>\\n<cert>' ) \\ ${ KEY_DIR } / ${ 1 } .crt \\ < ( echo -e '</cert>\\n<key>' ) \\ ${ KEY_DIR } / ${ 1 } .key \\ < ( echo -e '</key>\\n<tls-auth>' ) \\ ${ KEY_DIR } /ta.key \\ < ( echo -e '</tls-auth>' ) \\ > ${ OUTPUT_DIR } / ${ 1 } .ovpn To make the following script executable: chmod 700 ~/client-configs/make_config.sh","title":"Client Generating Script"},{"location":"services/openvpn/#creating-keys-certificates-and-profiles-for-clients","text":"You'll need to repeat this process for every client that will use the VPN, client profiles are not interchangeable, meaning that each client needs to use it's own generated profile and set of keys, trying to use a single profile for multiple devices will result in issues when connecting to the VPN. We'll go to the ~/openvpn-ca folder where all our keys are saved and source our variables. cd ~/openvpn-ca source vars For every client, run the following, make sure to change $CLIENT with the client name and remember to set a blank challenge password: ./build-key $CLIENT Once we've generated all the client keys and certificates we need, we'll go back to the folder where our script is located and run it for every client we made. cd ~/client-configs ./make_config.sh $CLIENT Our client profiles will be saved in the ./files folder.","title":"Creating Keys, Certificates and Profiles for Clients"},{"location":"services/openvpn/#tunnel-all-traffic-through-the-vpn","text":"My VPN configuration requires me to have two profiles, one where I can connect to my self-hosted services through a VPN and one where I can route all my traffic through the VPN. To route all the traffic to the VPN, simply copy your client profile and add the following line to the config: redirect-gateway def1","title":"Tunnel all traffic through the VPN"},{"location":"services/openvpn/#connecting-to-the-vpn","text":"To connect to the VPN your client device will need OpenVPN installed, you can find it for almost any platform. You'll need to transfer from the server to the client device their respective profile: ~/client-configs/files/$CLIENT.ovpn and the ta.key file ~/openvpn-ca/keys/ta.key (this seems to be only required on mobile clients but chances are your desktop client may need it as well). When connecting to the VPN, the client will receive it's own virtual private IP ( 10.8.0.x ), the server's IP is generally 10.8.0.1 . You can now establish connections to the server that are not port forwarded by the router (Samba/CIFS for example).","title":"Connecting to the VPN"},{"location":"services/plex/","text":"Plex \u00b6 Plex is an amazing tool that lets you run a media server on your computer. You can add your own music, movies, TV series or even pictures and stream them from an Internet browser or a mobile device (with the Plex app). This is pretty useful for all of us who keep a collection of movies or TV series DVD's and want them in a single place. The best feature this program has is the ability to share your library with your friends. Installation \u00b6 Unlike the other programs, this one installs in a pretty easy way. First, head over to the Plex downloads site and download the latest release for your operating system. wget https://downloads.plex.tv/plex-media-server/1.13.5.5291-6fa5e50a8/plexmediaserver_1.13.5.5291-6fa5e50a8_amd64.deb Warning Keep in mind that the link in the example above may be outdated. Now we proceed with the installation: sudo dpkg -i plexmediaserver_1.13.5.5291-6fa5e50a8_amd64.deb sudo systemctl enable plexmediaserver.service sudo systemctl start plexmediaserver.service Just like the other programs, we need to add a firewall rule. sudo ufw allow 32400/tcp We can now access the web interface via http://serverip:32400/web to set up the server and link it to our Plex account. Adding Multiple Hard Drives \u00b6 Maybe your media collection is so big that you cannot fit it in one single drive, you insert a second hard drive to your computer, you plug in your USB hard drive only to find out that when trying to add it to your Plex library you get bombarded with errors. This issue happens when there's some problems with the permissions system and the plex user. In order to fix this issue we'll need to change some settings with the plex user, enter the following commands: sudo gpasswd -a plex plugdev sudo gpasswd -a plex root sudo gpasswd -a plex sudo sudo gpasswd -a plex $USER sudo gpasswd -a $USER plex Note Be sure to replace $USER with your actual username. Now we'll add our hard drives to the mount points that we'll create so they get mounted and recognized by Plex on startup. In our case we'll add an internal (SATA) drive and an external (USB) drive. mkdir /media/plex_sata /media/plex_usb I'll assume your drives are already partitioned and formatted. We can list the drives with: sudo blkid You'll receive an output similar to this one: /dev/sda2: UUID=\"f5a613fe-981a-11e8-937c-080027498561\" TYPE=\"ext4\" PARTUUID=\"544fba45-03a8-4b4f-a199-26f6b1b1d94b\" /dev/loop0: TYPE=\"squashfs\" /dev/sda1: PARTUUID=\"46e94feb-2ed3-4b1f-b21f-41d452fe2b13\" Note Notice here that there's only one hard drive plugged in so it only recognizes /dev/sda , this is called the ID. If you have a drive plugged in and it does not show up in this list, it is likely not partitioned or formatted. Do not proceed if this happens. Instead use fdisk to fix your issues and then come back. Identify the drive UUID that corresponds with what you need to add to Plex , copy the one displayed, we'll need it later. We now need to edit our file system table. Danger Proceed at your own risk, messing up this file will most probably break your computer. You can still fix it by entering safe mode and logging in as root to rollback this file. Access the fstab file: sudo nano /etc/fstab We now need to add the following in a new line (separate everything with a Tab ). UUID=$UUID $DIR $FORMAT 0 0 If you replace everything with your information you should get something like this. UUID=A82CC6B45D20 /media/plex_usb ntfs 0 0 Finally, reboot your server. You can now add your external hard drive in the Plex library by adding the folder you added as a mount point.","title":"Plex"},{"location":"services/plex/#plex","text":"Plex is an amazing tool that lets you run a media server on your computer. You can add your own music, movies, TV series or even pictures and stream them from an Internet browser or a mobile device (with the Plex app). This is pretty useful for all of us who keep a collection of movies or TV series DVD's and want them in a single place. The best feature this program has is the ability to share your library with your friends.","title":"Plex"},{"location":"services/plex/#installation","text":"Unlike the other programs, this one installs in a pretty easy way. First, head over to the Plex downloads site and download the latest release for your operating system. wget https://downloads.plex.tv/plex-media-server/1.13.5.5291-6fa5e50a8/plexmediaserver_1.13.5.5291-6fa5e50a8_amd64.deb Warning Keep in mind that the link in the example above may be outdated. Now we proceed with the installation: sudo dpkg -i plexmediaserver_1.13.5.5291-6fa5e50a8_amd64.deb sudo systemctl enable plexmediaserver.service sudo systemctl start plexmediaserver.service Just like the other programs, we need to add a firewall rule. sudo ufw allow 32400/tcp We can now access the web interface via http://serverip:32400/web to set up the server and link it to our Plex account.","title":"Installation"},{"location":"services/plex/#adding-multiple-hard-drives","text":"Maybe your media collection is so big that you cannot fit it in one single drive, you insert a second hard drive to your computer, you plug in your USB hard drive only to find out that when trying to add it to your Plex library you get bombarded with errors. This issue happens when there's some problems with the permissions system and the plex user. In order to fix this issue we'll need to change some settings with the plex user, enter the following commands: sudo gpasswd -a plex plugdev sudo gpasswd -a plex root sudo gpasswd -a plex sudo sudo gpasswd -a plex $USER sudo gpasswd -a $USER plex Note Be sure to replace $USER with your actual username. Now we'll add our hard drives to the mount points that we'll create so they get mounted and recognized by Plex on startup. In our case we'll add an internal (SATA) drive and an external (USB) drive. mkdir /media/plex_sata /media/plex_usb I'll assume your drives are already partitioned and formatted. We can list the drives with: sudo blkid You'll receive an output similar to this one: /dev/sda2: UUID=\"f5a613fe-981a-11e8-937c-080027498561\" TYPE=\"ext4\" PARTUUID=\"544fba45-03a8-4b4f-a199-26f6b1b1d94b\" /dev/loop0: TYPE=\"squashfs\" /dev/sda1: PARTUUID=\"46e94feb-2ed3-4b1f-b21f-41d452fe2b13\" Note Notice here that there's only one hard drive plugged in so it only recognizes /dev/sda , this is called the ID. If you have a drive plugged in and it does not show up in this list, it is likely not partitioned or formatted. Do not proceed if this happens. Instead use fdisk to fix your issues and then come back. Identify the drive UUID that corresponds with what you need to add to Plex , copy the one displayed, we'll need it later. We now need to edit our file system table. Danger Proceed at your own risk, messing up this file will most probably break your computer. You can still fix it by entering safe mode and logging in as root to rollback this file. Access the fstab file: sudo nano /etc/fstab We now need to add the following in a new line (separate everything with a Tab ). UUID=$UUID $DIR $FORMAT 0 0 If you replace everything with your information you should get something like this. UUID=A82CC6B45D20 /media/plex_usb ntfs 0 0 Finally, reboot your server. You can now add your external hard drive in the Plex library by adding the folder you added as a mount point.","title":"Adding Multiple Hard Drives"},{"location":"services/radarr/","text":"Radarr \u00b6 Radarr is an RSS Downloader focused on movies, it'll help automate movie downloads. Requirements \u00b6 Before installing Radarr , we'll need to install Mono which is a C# Runtime for Linux. Run the following commands to install Mono : sudo apt-get install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt-get update sudo apt-get install mono-devel We also need mediainfo , install it with: sudo apt-get install mediainfo Installation \u00b6 The Radarr installation is reduced to the following commands: curl -L -O $( curl -s https://api.github.com/repos/Radarr/Radarr/releases | grep linux.tar.gz | grep browser_download_url | head -1 | cut -d \\\" -f 4 ) tar -xvzf Radarr.develop.*.linux.tar.gz sudo mv Radarr /opt And finally, we'll create a radarr user and group to manage Radarr : sudo addgroup radarr && sudo adduser --system radarr --ingroup radarr sudo chown radarr:radarr -R /opt/Radarr Starting Radarr \u00b6 To start Radarr , run the following command: mono --debug /opt/Radarr/Radarr.exe The web service should be available at http://localhost:7878 . Autostarting Radarr \u00b6 To autostart Radarr , we need to create a service file. sudo nano /etc/systemd/system/radarr.service And paste the following in the editor: [ Unit ] Description = Radarr Daemon After = syslog.target network.target [ Service ] User = radarr Group = radarr ExecStart = /usr/bin/mono --debug /opt/Radarr/Radarr.exe -nobrowser TimeoutStopSec = 20 KillMode = process Restart = on-failure [ Install ] WantedBy = multi-user.target Exit, save and enable and start the service. sudo systemctl enable radarr.service sudo systemctl start radarr.service Using a Server Name to Access Radarr \u00b6 If you wish to access Radarr through a specific domain, you will need to use some sort of reverse proxy. From the previous sections, where we installed Gitea , we created a domain that would be used to accessed Gitea . In this case, we we'll create a media subdomain on our domain to access Radarr through https://media.domain.com/radarr . Installing nginx \u00b6 If you haven't installed nginx , run: sudo apt-get install nginx Configuring Virtual Host \u00b6 We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/media And we'll paste the following: server { listen 80; server_name <your-domain>; location /radarr { proxy_pass http://localhost:7878; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note If you followed the guide for Sonarr , just add the location directive. Note Replace <your-domain> with the actual domain that you want to use to access Radarr . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service After setting-up the reverse proxy, we must also set the base URL for Radarr to work properly. Run the following command: sudo nano /home/radarr/.config/Radarr/config.xml And inside, look for the line: <UrlBase></UrlBase> And change it to: <UrlBase> /radarr </UrlBase> HTTPS Certificate \u00b6 If you have certbot installed and configured already, you can enable HTTPS for Radarr with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"Radarr"},{"location":"services/radarr/#radarr","text":"Radarr is an RSS Downloader focused on movies, it'll help automate movie downloads.","title":"Radarr"},{"location":"services/radarr/#requirements","text":"Before installing Radarr , we'll need to install Mono which is a C# Runtime for Linux. Run the following commands to install Mono : sudo apt-get install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt-get update sudo apt-get install mono-devel We also need mediainfo , install it with: sudo apt-get install mediainfo","title":"Requirements"},{"location":"services/radarr/#installation","text":"The Radarr installation is reduced to the following commands: curl -L -O $( curl -s https://api.github.com/repos/Radarr/Radarr/releases | grep linux.tar.gz | grep browser_download_url | head -1 | cut -d \\\" -f 4 ) tar -xvzf Radarr.develop.*.linux.tar.gz sudo mv Radarr /opt And finally, we'll create a radarr user and group to manage Radarr : sudo addgroup radarr && sudo adduser --system radarr --ingroup radarr sudo chown radarr:radarr -R /opt/Radarr","title":"Installation"},{"location":"services/radarr/#starting-radarr","text":"To start Radarr , run the following command: mono --debug /opt/Radarr/Radarr.exe The web service should be available at http://localhost:7878 .","title":"Starting Radarr"},{"location":"services/radarr/#autostarting-radarr","text":"To autostart Radarr , we need to create a service file. sudo nano /etc/systemd/system/radarr.service And paste the following in the editor: [ Unit ] Description = Radarr Daemon After = syslog.target network.target [ Service ] User = radarr Group = radarr ExecStart = /usr/bin/mono --debug /opt/Radarr/Radarr.exe -nobrowser TimeoutStopSec = 20 KillMode = process Restart = on-failure [ Install ] WantedBy = multi-user.target Exit, save and enable and start the service. sudo systemctl enable radarr.service sudo systemctl start radarr.service","title":"Autostarting Radarr"},{"location":"services/radarr/#using-a-server-name-to-access-radarr","text":"If you wish to access Radarr through a specific domain, you will need to use some sort of reverse proxy. From the previous sections, where we installed Gitea , we created a domain that would be used to accessed Gitea . In this case, we we'll create a media subdomain on our domain to access Radarr through https://media.domain.com/radarr .","title":"Using a Server Name to Access Radarr"},{"location":"services/radarr/#installing-nginx","text":"If you haven't installed nginx , run: sudo apt-get install nginx","title":"Installing nginx"},{"location":"services/radarr/#configuring-virtual-host","text":"We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/media And we'll paste the following: server { listen 80; server_name <your-domain>; location /radarr { proxy_pass http://localhost:7878; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note If you followed the guide for Sonarr , just add the location directive. Note Replace <your-domain> with the actual domain that you want to use to access Radarr . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service After setting-up the reverse proxy, we must also set the base URL for Radarr to work properly. Run the following command: sudo nano /home/radarr/.config/Radarr/config.xml And inside, look for the line: <UrlBase></UrlBase> And change it to: <UrlBase> /radarr </UrlBase>","title":"Configuring Virtual Host"},{"location":"services/radarr/#https-certificate","text":"If you have certbot installed and configured already, you can enable HTTPS for Radarr with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"HTTPS Certificate"},{"location":"services/rtmp-simulcast/","text":"RTMP Simulcast \u00b6 If you like to stream your video games to multiple platforms simultaneously, then RTMP Simulcast is for you. There are services out there that let you do this for free, but they have some cons: Depending on the service you use, your stream titles or descriptions could be used for advertising purposes, which basically means you lose complete control of what your stream description displays to your viewers. Since these services are used by multiple people at the same time, streaming platforms will most likely detect a huge pool of users streaming from the same IP which means that you'll be targeted by a low exposure algorithm that will, ironically, make your stream harder to find. You can bypass these problems by streaming simultaneously to your desired platforms yourself, but keep in mind, there are some difficulties as well: Doing this (ideally) requires you to have a second computer (performance doesn't matter too much, you could even use a Raspberry PI for this), you could technically achieve the same result with a virtual machine inside the streaming computer but it would represent a huge performance drop. Since you would be streaming to multiple platforms yourself, you would need a much higher upload bandwidth (around the stream bitrate multiplied by the number of platforms you're streaming to). For instance, my stream gets rendered at a bitrate of 6000 kbps , if I wanted to stream to 3 different platforms at the same time, I would need around 20000 kbps . Installation \u00b6 To achieve this, we will need nginx , to install it, run: sudo apt-get install nginx libnginx-mod-rtmp Configuration \u00b6 Now, we need to edit the nginx configuration file. sudo nano /etc/nginx/nginx.conf At the end of the file, append the following lines: # RTMP Stream Simulcast rtmp { server { listen 1935; application live { live on; record off; push rtmp://ingest.server.com/application/stream_key } application local { live on; record off; } } } Note Replace rtmp://ingest.sever.com/application/stream_key with the actual ingest server of the platform you want to stream to. For example: rtmp://a.rtmp.youtube.com/live2/{my_stream_key} . You can push multiple links. Note If your machine is running another web server such as Apache , comment out or delete all the directives inside the http{} group. Make sure to open the RTMP port: sudo ufw allow 1935 Streaming Settings \u00b6 In your streaming software, change your streaming server to the following: rtmp://server_local_ip/live And you can place whatever you want as the stream key. For testing purposes, you can also stream to rtmp://server_local_ip/local and watch it to see how it performs. Watching Your Stream Locally \u00b6 If you wish to see how your server perceives your stream, you can use a RTMP player (VLC will do the trick), and open the stream at the url rtmp://server_local_ip/local/{stream_key} . Replace {stream_key} with the actual streaming key that you're currently using.","title":"RTMP Simulcast"},{"location":"services/rtmp-simulcast/#rtmp-simulcast","text":"If you like to stream your video games to multiple platforms simultaneously, then RTMP Simulcast is for you. There are services out there that let you do this for free, but they have some cons: Depending on the service you use, your stream titles or descriptions could be used for advertising purposes, which basically means you lose complete control of what your stream description displays to your viewers. Since these services are used by multiple people at the same time, streaming platforms will most likely detect a huge pool of users streaming from the same IP which means that you'll be targeted by a low exposure algorithm that will, ironically, make your stream harder to find. You can bypass these problems by streaming simultaneously to your desired platforms yourself, but keep in mind, there are some difficulties as well: Doing this (ideally) requires you to have a second computer (performance doesn't matter too much, you could even use a Raspberry PI for this), you could technically achieve the same result with a virtual machine inside the streaming computer but it would represent a huge performance drop. Since you would be streaming to multiple platforms yourself, you would need a much higher upload bandwidth (around the stream bitrate multiplied by the number of platforms you're streaming to). For instance, my stream gets rendered at a bitrate of 6000 kbps , if I wanted to stream to 3 different platforms at the same time, I would need around 20000 kbps .","title":"RTMP Simulcast"},{"location":"services/rtmp-simulcast/#installation","text":"To achieve this, we will need nginx , to install it, run: sudo apt-get install nginx libnginx-mod-rtmp","title":"Installation"},{"location":"services/rtmp-simulcast/#configuration","text":"Now, we need to edit the nginx configuration file. sudo nano /etc/nginx/nginx.conf At the end of the file, append the following lines: # RTMP Stream Simulcast rtmp { server { listen 1935; application live { live on; record off; push rtmp://ingest.server.com/application/stream_key } application local { live on; record off; } } } Note Replace rtmp://ingest.sever.com/application/stream_key with the actual ingest server of the platform you want to stream to. For example: rtmp://a.rtmp.youtube.com/live2/{my_stream_key} . You can push multiple links. Note If your machine is running another web server such as Apache , comment out or delete all the directives inside the http{} group. Make sure to open the RTMP port: sudo ufw allow 1935","title":"Configuration"},{"location":"services/rtmp-simulcast/#streaming-settings","text":"In your streaming software, change your streaming server to the following: rtmp://server_local_ip/live And you can place whatever you want as the stream key. For testing purposes, you can also stream to rtmp://server_local_ip/local and watch it to see how it performs.","title":"Streaming Settings"},{"location":"services/rtmp-simulcast/#watching-your-stream-locally","text":"If you wish to see how your server perceives your stream, you can use a RTMP player (VLC will do the trick), and open the stream at the url rtmp://server_local_ip/local/{stream_key} . Replace {stream_key} with the actual streaming key that you're currently using.","title":"Watching Your Stream Locally"},{"location":"services/samba/","text":"Samba (SMB/CIFS) \u00b6 Samba lets your Linux based server share files and folders on a Windows File Sharing Workgroup using the same protocol (SMB/CIFS), this is pretty useful when you need to share files between computers on your network. This also help to allow your files to be accessed through the Internet (although it should only be done through a VPN for security purposes). Installation \u00b6 To install Samba : sudo apt-get install samba Configuring \u00b6 We'll make a folder on our home directory, this will serve as the share folder which will be accessible through SMB . cd ~ && mkdir sambashare We now need to add this folder entry to the configuration. Open up Samba 's config file. sudo nano /etc/samba/smb.conf Now we'll add the folder we created alongside other directories to the Samba share (note that you should replace these directories corresponding to your needs). You can add as many entries as you need as long as they're well formatted. [sambashare] comment = Samba shared folder path = /home/$USER/sambashare read only = no browsable = yes writeable = yes [home-users] comment = Home users folder path = /home read only = no browsable = yes writeable = yes Now we restart the Samba service to apply the changes: sudo service smbd restart Before trying to access the share with another computer, we'll need to add a password to the Samba user. Use the next command and replace $USER with your username. sudo smbpasswd -a $USER Now, as a final step, add the firewall rule to allow SMB connections. sudo ufw allow 445/tcp Issues with Permissions on Windows \u00b6 In case you try to access a shared folder that doesn't have the corresponding permissions to allow the Windows user to manage said folder, you can add the following directives to each shared folder block in the config file: create umask = 0777 directory umask = 0777 Shared Folders that Contain Symlinks \u00b6 If one of your shared folders has symlinks in them and you need to share them too, add the following directives to the shared folder block in the config file: follow symlinks = yes wide links = yes Browsing a Shared Folder as a Specified User \u00b6 If you want your shared folder to be accessed as a certain user, add the following directive to the shared folder block in the config file: force user = $USER Note Replace $USER with the UNIX username required.","title":"Samba"},{"location":"services/samba/#samba-smbcifs","text":"Samba lets your Linux based server share files and folders on a Windows File Sharing Workgroup using the same protocol (SMB/CIFS), this is pretty useful when you need to share files between computers on your network. This also help to allow your files to be accessed through the Internet (although it should only be done through a VPN for security purposes).","title":"Samba (SMB/CIFS)"},{"location":"services/samba/#installation","text":"To install Samba : sudo apt-get install samba","title":"Installation"},{"location":"services/samba/#configuring","text":"We'll make a folder on our home directory, this will serve as the share folder which will be accessible through SMB . cd ~ && mkdir sambashare We now need to add this folder entry to the configuration. Open up Samba 's config file. sudo nano /etc/samba/smb.conf Now we'll add the folder we created alongside other directories to the Samba share (note that you should replace these directories corresponding to your needs). You can add as many entries as you need as long as they're well formatted. [sambashare] comment = Samba shared folder path = /home/$USER/sambashare read only = no browsable = yes writeable = yes [home-users] comment = Home users folder path = /home read only = no browsable = yes writeable = yes Now we restart the Samba service to apply the changes: sudo service smbd restart Before trying to access the share with another computer, we'll need to add a password to the Samba user. Use the next command and replace $USER with your username. sudo smbpasswd -a $USER Now, as a final step, add the firewall rule to allow SMB connections. sudo ufw allow 445/tcp","title":"Configuring"},{"location":"services/samba/#issues-with-permissions-on-windows","text":"In case you try to access a shared folder that doesn't have the corresponding permissions to allow the Windows user to manage said folder, you can add the following directives to each shared folder block in the config file: create umask = 0777 directory umask = 0777","title":"Issues with Permissions on Windows"},{"location":"services/samba/#shared-folders-that-contain-symlinks","text":"If one of your shared folders has symlinks in them and you need to share them too, add the following directives to the shared folder block in the config file: follow symlinks = yes wide links = yes","title":"Shared Folders that Contain Symlinks"},{"location":"services/samba/#browsing-a-shared-folder-as-a-specified-user","text":"If you want your shared folder to be accessed as a certain user, add the following directive to the shared folder block in the config file: force user = $USER Note Replace $USER with the UNIX username required.","title":"Browsing a Shared Folder as a Specified User"},{"location":"services/sonarr/","text":"Sonarr \u00b6 Sonarr is an RSS Downloader focused on TV series, it'll help automate episode downloads from our favorite shows. Requirements \u00b6 Before installing Sonarr , we'll need to install Mono which is a C# Runtime for Linux. Run the following commands to install Mono : sudo apt-get install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt-get update sudo apt-get install mono-devel Installation \u00b6 To install Sonarr we need to add its repo first. The installation process is reduced to the following commands: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0xA236C58F409091A18ACA53CBEBFF6B99D9B78493 echo \"deb http://apt.sonarr.tv/ master main\" | sudo tee /etc/apt/sources.list.d/sonarr.list sudo apt-get update sudo apt-get install nzbdrone And finally, we'll create a sonarr user and group to manage Sonarr : sudo addgroup sonarr && sudo adduser --system sonarr --ingroup sonarr sudo chown sonarr:sonarr -R /opt/NzbDrone Starting Sonarr \u00b6 To start Sonarr , run the following command: mono --debug /opt/NzbDrone/NzbDrone.exe The web service should be available at http://localhost:8989 . Autostarting Sonarr \u00b6 To autostart Sonarr , we need to create a service file. sudo nano /etc/systemd/system/sonarr.service And paste the following in the editor: [ Unit ] Description = Sonarr Daemon After = network.target [ Service ] User = sonarr Group = sonarr ExecStart = /usr/bin/mono --debug /opt/NzbDrone/NzbDrone.exe -nobrowser TimeoutStopSec = 20 KillMode = process Restart = on-failure [ Install ] WantedBy = multi-user.target Exit, save and enable and start the service. sudo systemctl enable sonarr.service sudo systemctl start sonarr.service Using a Server Name to Access Sonarr \u00b6 If you wish to access Sonarr through a specific domain, you will need to use some sort of reverse proxy. From the previous sections, where we installed Gitea , we created a domain that would be used to accessed Gitea . In this case, we we'll create a media subdomain on our domain to access Sonarr through https://media.domain.com/sonarr . Installing nginx \u00b6 If you haven't installed nginx , run: sudo apt-get install nginx Configuring Virtual Host \u00b6 We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/media And we'll paste the following: server { listen 80; server_name <your-domain>; location /sonarr { proxy_pass http://localhost:8989; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note Replace <your-domain> with the actual domain that you want to use to access Sonarr . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service After setting-up the reverse proxy, we must also set the base URL for Sonarr to work properly. Run the following command: sudo nano /home/sonarr/.config/NzbDrone/config.xml And inside, look for the line: <UrlBase></UrlBase> And change it to: <UrlBase> /sonarr </UrlBase> HTTPS Certificate \u00b6 If you have certbot installed and configured already, you can enable HTTPS for Sonarr with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"Sonarr"},{"location":"services/sonarr/#sonarr","text":"Sonarr is an RSS Downloader focused on TV series, it'll help automate episode downloads from our favorite shows.","title":"Sonarr"},{"location":"services/sonarr/#requirements","text":"Before installing Sonarr , we'll need to install Mono which is a C# Runtime for Linux. Run the following commands to install Mono : sudo apt-get install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt-get update sudo apt-get install mono-devel","title":"Requirements"},{"location":"services/sonarr/#installation","text":"To install Sonarr we need to add its repo first. The installation process is reduced to the following commands: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0xA236C58F409091A18ACA53CBEBFF6B99D9B78493 echo \"deb http://apt.sonarr.tv/ master main\" | sudo tee /etc/apt/sources.list.d/sonarr.list sudo apt-get update sudo apt-get install nzbdrone And finally, we'll create a sonarr user and group to manage Sonarr : sudo addgroup sonarr && sudo adduser --system sonarr --ingroup sonarr sudo chown sonarr:sonarr -R /opt/NzbDrone","title":"Installation"},{"location":"services/sonarr/#starting-sonarr","text":"To start Sonarr , run the following command: mono --debug /opt/NzbDrone/NzbDrone.exe The web service should be available at http://localhost:8989 .","title":"Starting Sonarr"},{"location":"services/sonarr/#autostarting-sonarr","text":"To autostart Sonarr , we need to create a service file. sudo nano /etc/systemd/system/sonarr.service And paste the following in the editor: [ Unit ] Description = Sonarr Daemon After = network.target [ Service ] User = sonarr Group = sonarr ExecStart = /usr/bin/mono --debug /opt/NzbDrone/NzbDrone.exe -nobrowser TimeoutStopSec = 20 KillMode = process Restart = on-failure [ Install ] WantedBy = multi-user.target Exit, save and enable and start the service. sudo systemctl enable sonarr.service sudo systemctl start sonarr.service","title":"Autostarting Sonarr"},{"location":"services/sonarr/#using-a-server-name-to-access-sonarr","text":"If you wish to access Sonarr through a specific domain, you will need to use some sort of reverse proxy. From the previous sections, where we installed Gitea , we created a domain that would be used to accessed Gitea . In this case, we we'll create a media subdomain on our domain to access Sonarr through https://media.domain.com/sonarr .","title":"Using a Server Name to Access Sonarr"},{"location":"services/sonarr/#installing-nginx","text":"If you haven't installed nginx , run: sudo apt-get install nginx","title":"Installing nginx"},{"location":"services/sonarr/#configuring-virtual-host","text":"We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/media And we'll paste the following: server { listen 80; server_name <your-domain>; location /sonarr { proxy_pass http://localhost:8989; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note Replace <your-domain> with the actual domain that you want to use to access Sonarr . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service After setting-up the reverse proxy, we must also set the base URL for Sonarr to work properly. Run the following command: sudo nano /home/sonarr/.config/NzbDrone/config.xml And inside, look for the line: <UrlBase></UrlBase> And change it to: <UrlBase> /sonarr </UrlBase>","title":"Configuring Virtual Host"},{"location":"services/sonarr/#https-certificate","text":"If you have certbot installed and configured already, you can enable HTTPS for Sonarr with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"HTTPS Certificate"},{"location":"services/squid/","text":"Squid (HTTP Proxy) \u00b6 Squid is an easy to set up HTTP proxy with the ability to do web-caching, meaning that if multiple users connect to the proxy and then try to download the same file, the process will be sped up for the second and next clients downloading because the file will be stored in the server's cache. An HTTP proxy is useful when you need to access IP whitelisted applications from other locations without the need to use a VPN. Installation \u00b6 Anyways, to install Squid : sudo apt-get install squid apache2-utils We'll install apache2-utils to generate users so we can limit the proxy connections by user authentication. Configuration \u00b6 To set up said Squid users: sudo touch /etc/squid/squid_passwd sudo chown proxy /etc/squid/squid_passwd sudo htpasswd /etc/squid/squid_passwd $USER Note Change $USER with the username you want to create, you'll be then asked to enter a password. Keep in mind you can create as many users as you need. We can now edit Squid 's configuration: sudo nano /etc/squid/squid.conf First we'll change the port that Squid will listen to (we like 1337/TCP for this). Look for and replace the following: http_port 1337 Now we'll tell Squid to add the user authentication parameters we need. Find the following, uncomment these parameters and edit them if needed. auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/squid_passwd acl ncsa_users proxy_auth REQUIRED auth_param basic realm Squid proxy-caching web server auth_param basic credentialsttl 12 hours Before finishing, we'll tell Squid to allow connections for authenticated users. Look for http_access deny all and above that line add the following: http_access allow ncsa_users Now we'll create a new firewall rule to allow connections to the 1337/TCP port. sudo ufw allow 1337/tcp We can now restart Squid . sudo service squid restart We're now ready to use our HTTP proxy, in your internet browser you can add your IP and the port you used to the proxy settings, if you try to connect with no authentication you'll get an error when browsing.","title":"Squid"},{"location":"services/squid/#squid-http-proxy","text":"Squid is an easy to set up HTTP proxy with the ability to do web-caching, meaning that if multiple users connect to the proxy and then try to download the same file, the process will be sped up for the second and next clients downloading because the file will be stored in the server's cache. An HTTP proxy is useful when you need to access IP whitelisted applications from other locations without the need to use a VPN.","title":"Squid (HTTP Proxy)"},{"location":"services/squid/#installation","text":"Anyways, to install Squid : sudo apt-get install squid apache2-utils We'll install apache2-utils to generate users so we can limit the proxy connections by user authentication.","title":"Installation"},{"location":"services/squid/#configuration","text":"To set up said Squid users: sudo touch /etc/squid/squid_passwd sudo chown proxy /etc/squid/squid_passwd sudo htpasswd /etc/squid/squid_passwd $USER Note Change $USER with the username you want to create, you'll be then asked to enter a password. Keep in mind you can create as many users as you need. We can now edit Squid 's configuration: sudo nano /etc/squid/squid.conf First we'll change the port that Squid will listen to (we like 1337/TCP for this). Look for and replace the following: http_port 1337 Now we'll tell Squid to add the user authentication parameters we need. Find the following, uncomment these parameters and edit them if needed. auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/squid_passwd acl ncsa_users proxy_auth REQUIRED auth_param basic realm Squid proxy-caching web server auth_param basic credentialsttl 12 hours Before finishing, we'll tell Squid to allow connections for authenticated users. Look for http_access deny all and above that line add the following: http_access allow ncsa_users Now we'll create a new firewall rule to allow connections to the 1337/TCP port. sudo ufw allow 1337/tcp We can now restart Squid . sudo service squid restart We're now ready to use our HTTP proxy, in your internet browser you can add your IP and the port you used to the proxy settings, if you try to connect with no authentication you'll get an error when browsing.","title":"Configuration"},{"location":"services/tautulli/","text":"Tautulli \u00b6 Tautulli is a pretty good companion tool for your Plex server that allows you to get information, usage statistics on your Plex libraries and lot of other features. Installing Requirements \u00b6 Tautulli requires Python to run, for this, we'll install the following dependencies: sudo apt-get install git-core python python-setuptools tzdata Installation \u00b6 After installing the dependencies, we'll proceed with the installation process which is reduced by the following commands: cd /opt sudo git clone https://github.com/Tautulli/Tautulli.git We'll also create a user that will run Tautulli : sudo addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli sudo chown tautulli:tautulli -R /opt/Tautulli Starting Tautulli \u00b6 To start Tautulli , simply change to the folder where Tautulli was installed and start up the Python script. cd /opt/Tautulli python Tautulli.py Tautulli will be live in the following address: http://<server_ip>:8181 Autostarting Tautulli \u00b6 To autostart Tautulli on system boot, you need to create a service file. sudo nano /etc/systemd/system/tautulli.service And in the text editor, paste the following: [ Unit ] Description = Tautulli - Stats for Plex Media Server usage Wants = network-online.target After = network-online.target [ Service ] ExecStart = /opt/Tautulli/Tautulli.py --config /opt/Tautulli/config.ini --datadir /opt/Tautulli --quiet --daemon --nolaunch GuessMainPID = no Type = forking User = tautulli Group = tautulli Restart = on-abnormal RestartSec = 5 StartLimitInterval = 90 StartLimitBurst = 3 [ Install ] WantedBy = multi-user.target Warning Keep in mind that this assumes that the user that will run Tautulli is called tautulli , if this isn't the case for you, edit the service file accordingly. Finally we'll enable and start the service. sudo systemctl enable tautulli.service sudo systemctl start tautulli.service Using a Server Name to Access Tautulli \u00b6 If you wish to access your Tautulli service through a specific domain you will need to use some sort of reverse proxy. From the previous sections where we installed Gitea , we created a domain that would be used to access Gitea . If you wish to achieve the same for Tautulli , please follow the next instructions. Installing nginx \u00b6 If you haven't installed nginx , run: sudo apt-get install nginx Configuring Virtual Host \u00b6 We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/tautulli And we'll paste the following: server { listen 80; server_name <your-domain>; location / { proxy_pass http://localhost:8181; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note Replace <your-domain> with the actual domain that you want to use to access Tautulli . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service HTTPS Certificate \u00b6 If you have certbot installed and configured already, you can enable HTTPS for Tautulli with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea . Setting-up Discord Notifications \u00b6 One of the cool things about Tautulli is that it can send notifications to various types of channels about certain events (an user started streaming something, new media has been added, plex server is down...). With the help of webhooks, we'll set up some notifications for our Discord. Firstly, on our Discord, we must right click the name of the text channel where we want to set up our notifications. Select Edit Channel and head over to Webhooks . Here we'll click on Create Webhook and modify the Webhook user to fit our needs (name and profile picture). Finally we'll copy the webhook url which we'll need in Tautulli . Now we head over to Tautulli and go to the Settings and then to Notification Agents . We'll now Add a new notification agent and select Webhook . Note Keep in mind that there's an option that says Discord but it is a bit limited (albeit easier to set up). We'll stick to Webhook for a more customized notification message. Under configuration , in Webhook URL , paste the URL that you copied previously and keep Webhook Method set to POST . Enter the Triggers tab and select the ones that interest you the most. For this guide, we'll enable Plex Server Down , Plex Server Back Up , Plex Remote Access Down , Plex Remote Access Back Up and Recently Added . Now head to the Data tab, here you'll need to put the JSON body that will be sent to Discord to handle the messages. Tip For a detailed guide on how to build your JSON bodies to send as Webhooks, check out this guide . Once you've built your JSON body, add it to the JSON Data text-box and leave the JSON Headers empty. JSON Body Examples \u00b6 These notification messages should be customized to your needs. Here's some examples that I currently use. Plex Server Down \u00b6 Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Status\" , \"value\" : \"The Plex Server is currently down! :sob:\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] } Plex Server Back Up \u00b6 Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Status\" , \"value\" : \"The Plex Server is back up! :partying_face:\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] } Plex Remote Access Down \u00b6 Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Remote Access Status\" , \"value\" : \"The Plex Server is currently down! :sob: \\n {remote_access_reason}\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] } Plex Remote Access Back Up \u00b6 Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Remote Access Status\" , \"value\" : \"The Plex Server is back up! :partying_face:\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] } Recently Added \u00b6 Preview: JSON body: { \"embeds\" : [ { \"title\" : \"Update ({current_day}/{current_month}/{current_year}):\" , <movie> \"description\" : \"New movie added!\" , </movie><show> \"description\" : \"New show added!\" , </show><seaso n > \"description\" : \"New season added!\" , </seaso n ><album> \"description\" : \"New album added!\" , </album> \"color\" : 15048717 , \"fields\" : [ <movie> { \"name\" : \"Movie Name:\" , \"value\" : \"{title} ({year})\" }, </movie> <show> { \"name\" : \"Show Name:\" , \"value\" : \"{show_name}\" }, </show> <seaso n > { \"name\" : \"Show Name:\" , \"value\" : \"{show_name}\" }, </seaso n > <album> { \"name\" : \"Album Name:\" , \"value\" : \"{album_name} by {artist_name}\" }, </album> { \"name\" : \"Library:\" , \"value\" : \":o: {library_name}\" , \"inline\" : true }, { <movie> \"name\" : \"Watch Now\" , </movie><show> \"name\" : \"Watch Now\" , </show><seaso n > \"name\" : \"Watch Now\" , </seaso n ><album> \"name\" : \"Listen Now\" , </album> \"value\" : \"[Plex Web]({plex_url})\" , \"inline\" : true } ], \"thumbnail\" : { \"url\" : \"{poster_url}\" }, \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] } Note This one requires the following Conditions : Media Type is movie or show or season or album","title":"Tautulli"},{"location":"services/tautulli/#tautulli","text":"Tautulli is a pretty good companion tool for your Plex server that allows you to get information, usage statistics on your Plex libraries and lot of other features.","title":"Tautulli"},{"location":"services/tautulli/#installing-requirements","text":"Tautulli requires Python to run, for this, we'll install the following dependencies: sudo apt-get install git-core python python-setuptools tzdata","title":"Installing Requirements"},{"location":"services/tautulli/#installation","text":"After installing the dependencies, we'll proceed with the installation process which is reduced by the following commands: cd /opt sudo git clone https://github.com/Tautulli/Tautulli.git We'll also create a user that will run Tautulli : sudo addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli sudo chown tautulli:tautulli -R /opt/Tautulli","title":"Installation"},{"location":"services/tautulli/#starting-tautulli","text":"To start Tautulli , simply change to the folder where Tautulli was installed and start up the Python script. cd /opt/Tautulli python Tautulli.py Tautulli will be live in the following address: http://<server_ip>:8181","title":"Starting Tautulli"},{"location":"services/tautulli/#autostarting-tautulli","text":"To autostart Tautulli on system boot, you need to create a service file. sudo nano /etc/systemd/system/tautulli.service And in the text editor, paste the following: [ Unit ] Description = Tautulli - Stats for Plex Media Server usage Wants = network-online.target After = network-online.target [ Service ] ExecStart = /opt/Tautulli/Tautulli.py --config /opt/Tautulli/config.ini --datadir /opt/Tautulli --quiet --daemon --nolaunch GuessMainPID = no Type = forking User = tautulli Group = tautulli Restart = on-abnormal RestartSec = 5 StartLimitInterval = 90 StartLimitBurst = 3 [ Install ] WantedBy = multi-user.target Warning Keep in mind that this assumes that the user that will run Tautulli is called tautulli , if this isn't the case for you, edit the service file accordingly. Finally we'll enable and start the service. sudo systemctl enable tautulli.service sudo systemctl start tautulli.service","title":"Autostarting Tautulli"},{"location":"services/tautulli/#using-a-server-name-to-access-tautulli","text":"If you wish to access your Tautulli service through a specific domain you will need to use some sort of reverse proxy. From the previous sections where we installed Gitea , we created a domain that would be used to access Gitea . If you wish to achieve the same for Tautulli , please follow the next instructions.","title":"Using a Server Name to Access Tautulli"},{"location":"services/tautulli/#installing-nginx","text":"If you haven't installed nginx , run: sudo apt-get install nginx","title":"Installing nginx"},{"location":"services/tautulli/#configuring-virtual-host","text":"We'll now create a virtual host file: sudo nano /etc/nginx/sites-enabled/tautulli And we'll paste the following: server { listen 80; server_name <your-domain>; location / { proxy_pass http://localhost:8181; } proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } Note Replace <your-domain> with the actual domain that you want to use to access Tautulli . If there's still a default configuration, you'll need to remove it: sudo rm /etc/nginx/sites-enabled/default And finally, we'll restart nginx . sudo systemctl restart nginx.service","title":"Configuring Virtual Host"},{"location":"services/tautulli/#https-certificate","text":"If you have certbot installed and configured already, you can enable HTTPS for Tautulli with the following command: sudo certbot --nginx If you haven't enabled certbot or configured it yet, check out this part of the guide: Enabling HTTPS for Gitea .","title":"HTTPS Certificate"},{"location":"services/tautulli/#setting-up-discord-notifications","text":"One of the cool things about Tautulli is that it can send notifications to various types of channels about certain events (an user started streaming something, new media has been added, plex server is down...). With the help of webhooks, we'll set up some notifications for our Discord. Firstly, on our Discord, we must right click the name of the text channel where we want to set up our notifications. Select Edit Channel and head over to Webhooks . Here we'll click on Create Webhook and modify the Webhook user to fit our needs (name and profile picture). Finally we'll copy the webhook url which we'll need in Tautulli . Now we head over to Tautulli and go to the Settings and then to Notification Agents . We'll now Add a new notification agent and select Webhook . Note Keep in mind that there's an option that says Discord but it is a bit limited (albeit easier to set up). We'll stick to Webhook for a more customized notification message. Under configuration , in Webhook URL , paste the URL that you copied previously and keep Webhook Method set to POST . Enter the Triggers tab and select the ones that interest you the most. For this guide, we'll enable Plex Server Down , Plex Server Back Up , Plex Remote Access Down , Plex Remote Access Back Up and Recently Added . Now head to the Data tab, here you'll need to put the JSON body that will be sent to Discord to handle the messages. Tip For a detailed guide on how to build your JSON bodies to send as Webhooks, check out this guide . Once you've built your JSON body, add it to the JSON Data text-box and leave the JSON Headers empty.","title":"Setting-up Discord Notifications"},{"location":"services/tautulli/#json-body-examples","text":"These notification messages should be customized to your needs. Here's some examples that I currently use.","title":"JSON Body Examples"},{"location":"services/tautulli/#plex-server-down","text":"Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Status\" , \"value\" : \"The Plex Server is currently down! :sob:\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] }","title":"Plex Server Down"},{"location":"services/tautulli/#plex-server-back-up","text":"Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Status\" , \"value\" : \"The Plex Server is back up! :partying_face:\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] }","title":"Plex Server Back Up"},{"location":"services/tautulli/#plex-remote-access-down","text":"Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Remote Access Status\" , \"value\" : \"The Plex Server is currently down! :sob: \\n {remote_access_reason}\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] }","title":"Plex Remote Access Down"},{"location":"services/tautulli/#plex-remote-access-back-up","text":"Preview: JSON body: { \"embeds\" : [ { \"color\" : 15048717 , \"fields\" : [ { \"name\" : \"Plex Remote Access Status\" , \"value\" : \"The Plex Server is back up! :partying_face:\" } ], \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] }","title":"Plex Remote Access Back Up"},{"location":"services/tautulli/#recently-added","text":"Preview: JSON body: { \"embeds\" : [ { \"title\" : \"Update ({current_day}/{current_month}/{current_year}):\" , <movie> \"description\" : \"New movie added!\" , </movie><show> \"description\" : \"New show added!\" , </show><seaso n > \"description\" : \"New season added!\" , </seaso n ><album> \"description\" : \"New album added!\" , </album> \"color\" : 15048717 , \"fields\" : [ <movie> { \"name\" : \"Movie Name:\" , \"value\" : \"{title} ({year})\" }, </movie> <show> { \"name\" : \"Show Name:\" , \"value\" : \"{show_name}\" }, </show> <seaso n > { \"name\" : \"Show Name:\" , \"value\" : \"{show_name}\" }, </seaso n > <album> { \"name\" : \"Album Name:\" , \"value\" : \"{album_name} by {artist_name}\" }, </album> { \"name\" : \"Library:\" , \"value\" : \":o: {library_name}\" , \"inline\" : true }, { <movie> \"name\" : \"Watch Now\" , </movie><show> \"name\" : \"Watch Now\" , </show><seaso n > \"name\" : \"Watch Now\" , </seaso n ><album> \"name\" : \"Listen Now\" , </album> \"value\" : \"[Plex Web]({plex_url})\" , \"inline\" : true } ], \"thumbnail\" : { \"url\" : \"{poster_url}\" }, \"footer\" : { \"text\" : \"{server_name} on {server_platform} - {server_version}\" } } ] } Note This one requires the following Conditions : Media Type is movie or show or season or album","title":"Recently Added"},{"location":"services/teamspeak/","text":"TeamSpeak 3 \u00b6 With the existence of Discord, it seems like TeamSpeak 3 is losing it's popularity but for the sake of the server's utility, we'll still make a TeamSpeak 3 server. Installation \u00b6 Firstly, we need to make a new user. sudo adduser --disabled-login teamspeak sudo -iu teamspeak We can now download the newest version of TeamSpeak 3 Server and extract it. mkdir Downloads && cd Downloads wget http://dl.4players.de/ts/releases/3.3.0/teamspeak3-server_linux_amd64-3.3.0.tar.bz2 tar xvf teamspeak3-server_linux_amd64-3.3.0.tar.bz2 Warning Keep in mind that the link above may be outdated. Before starting the server, we need to accept TeamSpeak 3 's license agreement. touch .ts3server_license_accepted Auto-starting \u00b6 Now, we need to make a systemctl service so the server can run as a service and autostart with the server, this should be done in a sudoer user account. Create the daemon with: sudo nano /lib/systemd/system/teamspeak.service And in the text editor, paste the following and save. [ Unit ] Description = TeamSpeak 3 Server After = network.target [ Service ] WorkingDirectory = /home/teamspeak/ User = teamspeak Group = teamspeak Type = forking ExecStart = /home/teamspeak/ts3server_startscript.sh start inifile = ts3server.ini ExecStop = /home/teamspeak/ts3server_startscript.sh stop PIDFile = /home/teamspeak/ts3server.pid RestartSec = 15 Restart = always [ Install ] WantedBy = multi-user.target We can now reload systemctl and start the service. sudo systemctl --system daemon-reload sudo systemctl enable teamspeak.service sudo systemctl start teamspeak.service The server is now up and running but before we continue, we need to set up some things. Configuration \u00b6 We can get our server's privilege key so we can turn ourselves as the server admin. cat /home/teamspeak/logs/ts3server_* You'll receive an output similar to this one: -------------------------------------------------------- ServerAdmin privilege key created, please use the line below token=**************************************** -------------------------------------------------------- Lastly, let's not forget to add firewall rules to accept TeamSpeak 3 connections. sudo ufw allow 9987/udp sudo ufw allow 30033/tcp sudo ufw allow 10011/tcp Finally, once you connect to your server, you'll be prompted to add the privilege key, enter it to become server admin and change any server configuration from within your client.","title":"Teamspeak 3"},{"location":"services/teamspeak/#teamspeak-3","text":"With the existence of Discord, it seems like TeamSpeak 3 is losing it's popularity but for the sake of the server's utility, we'll still make a TeamSpeak 3 server.","title":"TeamSpeak 3"},{"location":"services/teamspeak/#installation","text":"Firstly, we need to make a new user. sudo adduser --disabled-login teamspeak sudo -iu teamspeak We can now download the newest version of TeamSpeak 3 Server and extract it. mkdir Downloads && cd Downloads wget http://dl.4players.de/ts/releases/3.3.0/teamspeak3-server_linux_amd64-3.3.0.tar.bz2 tar xvf teamspeak3-server_linux_amd64-3.3.0.tar.bz2 Warning Keep in mind that the link above may be outdated. Before starting the server, we need to accept TeamSpeak 3 's license agreement. touch .ts3server_license_accepted","title":"Installation"},{"location":"services/teamspeak/#auto-starting","text":"Now, we need to make a systemctl service so the server can run as a service and autostart with the server, this should be done in a sudoer user account. Create the daemon with: sudo nano /lib/systemd/system/teamspeak.service And in the text editor, paste the following and save. [ Unit ] Description = TeamSpeak 3 Server After = network.target [ Service ] WorkingDirectory = /home/teamspeak/ User = teamspeak Group = teamspeak Type = forking ExecStart = /home/teamspeak/ts3server_startscript.sh start inifile = ts3server.ini ExecStop = /home/teamspeak/ts3server_startscript.sh stop PIDFile = /home/teamspeak/ts3server.pid RestartSec = 15 Restart = always [ Install ] WantedBy = multi-user.target We can now reload systemctl and start the service. sudo systemctl --system daemon-reload sudo systemctl enable teamspeak.service sudo systemctl start teamspeak.service The server is now up and running but before we continue, we need to set up some things.","title":"Auto-starting"},{"location":"services/teamspeak/#configuration","text":"We can get our server's privilege key so we can turn ourselves as the server admin. cat /home/teamspeak/logs/ts3server_* You'll receive an output similar to this one: -------------------------------------------------------- ServerAdmin privilege key created, please use the line below token=**************************************** -------------------------------------------------------- Lastly, let's not forget to add firewall rules to accept TeamSpeak 3 connections. sudo ufw allow 9987/udp sudo ufw allow 30033/tcp sudo ufw allow 10011/tcp Finally, once you connect to your server, you'll be prompted to add the privilege key, enter it to become server admin and change any server configuration from within your client.","title":"Configuration"},{"location":"services/transmission/","text":"Transmission \u00b6 Transmission is a torrent downloader that has the option to run in a CLI daemon, perfect for our little headless server. Installation \u00b6 To install Transmission , we'll need to add a PPA source, update the sources and directly install. sudo add-apt-repository ppa:transmissionbt/ppa && sudo apt-get update sudo apt-get install transmission-cli transmission-common transmission-daemon Configuration \u00b6 Since our server OS is installed in a small SSD, we're going to use an internal HDD to store our downloads. I'll assume you already have the HDD mounted properly. For the sake of the example, we're going to mount our HDD in /media/internal_sata . We're going to create a Downloads folder and we'll grant it full permissions so we don't run into issues with permissions when downloading. mkdir /media/internal_sata/Downloads sudo chmod 777 -R /media/internal/sata_Downloads Now to configure it, we need to stop the Transmission service and edit the config file. sudo systemctl stop transmission-daemon.service sudo nano /var/lib/transmission-daemon/info/settings.json In this file, we'll edit just the next lines: \"rpc-enabled\": true, \"rpc-password\": \"password here\", \"rpc-username\": \"user login\", \"rpc-whitelist-enabled\": false, \"download-dir\": \"/home/transmission/Downloads\", \"incomplete-dir\": \"/home/transmission/Downloads\", \"umask\": 2, Note As a little explanation, rpc-password can be set as whatever you want, once the file is saved, your password will be encrypted, so no need to worry about storing your password in plain text. The rpc-username can be set as whatever you want, it doesn't have anything to do with your server username, this will be used to login to Transmission on a remote session, same goes for rpc-password . We need to add a firewall rule. sudo ufw allow 9091/tcp So we can now start the Transmission service. sudo systemctl start transmission-daemon.service Connecting to your Transmission Session \u00b6 There are lots of ways to connect to Transmission , my two favorite ones are: Transmission Remote GUI and Transmission Web GUI , the latter being the one already included with Transmission. With the first one you can access Transmission as if it was a regular Torrent client on your PC, with Transmission Web , you can access it through a web browser by accessing http://serverip:9091 , login with your credentials and you're ready to go.","title":"Transmission"},{"location":"services/transmission/#transmission","text":"Transmission is a torrent downloader that has the option to run in a CLI daemon, perfect for our little headless server.","title":"Transmission"},{"location":"services/transmission/#installation","text":"To install Transmission , we'll need to add a PPA source, update the sources and directly install. sudo add-apt-repository ppa:transmissionbt/ppa && sudo apt-get update sudo apt-get install transmission-cli transmission-common transmission-daemon","title":"Installation"},{"location":"services/transmission/#configuration","text":"Since our server OS is installed in a small SSD, we're going to use an internal HDD to store our downloads. I'll assume you already have the HDD mounted properly. For the sake of the example, we're going to mount our HDD in /media/internal_sata . We're going to create a Downloads folder and we'll grant it full permissions so we don't run into issues with permissions when downloading. mkdir /media/internal_sata/Downloads sudo chmod 777 -R /media/internal/sata_Downloads Now to configure it, we need to stop the Transmission service and edit the config file. sudo systemctl stop transmission-daemon.service sudo nano /var/lib/transmission-daemon/info/settings.json In this file, we'll edit just the next lines: \"rpc-enabled\": true, \"rpc-password\": \"password here\", \"rpc-username\": \"user login\", \"rpc-whitelist-enabled\": false, \"download-dir\": \"/home/transmission/Downloads\", \"incomplete-dir\": \"/home/transmission/Downloads\", \"umask\": 2, Note As a little explanation, rpc-password can be set as whatever you want, once the file is saved, your password will be encrypted, so no need to worry about storing your password in plain text. The rpc-username can be set as whatever you want, it doesn't have anything to do with your server username, this will be used to login to Transmission on a remote session, same goes for rpc-password . We need to add a firewall rule. sudo ufw allow 9091/tcp So we can now start the Transmission service. sudo systemctl start transmission-daemon.service","title":"Configuration"},{"location":"services/transmission/#connecting-to-your-transmission-session","text":"There are lots of ways to connect to Transmission , my two favorite ones are: Transmission Remote GUI and Transmission Web GUI , the latter being the one already included with Transmission. With the first one you can access Transmission as if it was a regular Torrent client on your PC, with Transmission Web , you can access it through a web browser by accessing http://serverip:9091 , login with your credentials and you're ready to go.","title":"Connecting to your Transmission Session"},{"location":"setting-up/networking/","text":"Networking \u00b6 Here's a table that contains the required default ports that need to be forwarded on the router (and allowed by the firewall) so the services are accessible from outside the private network. Ports can change if desired, port forwarding rules should be set up accordingly. Port Forwarding Table \u00b6 Service Port Range Protocol SSH 22 TCP Virtualbox - RDP 3389 TCP TeamSpeak 3 - Voice 9987 UDP TeamSpeak 3 - File Transfer 30033 TCP TeamSpeak 3 - ServerQuery 10011 TCP OpenVPN 1194 UDP Squid 1337 TCP Plex 32400 TCP Transmission 9091 TCP Source Games 27000-27050 TCP/UDP Arma 3 2302-2345 TCP/UDP Assetto Corsa 9600 TCP/UDP Assetto Corsa - HTTP 8081 TCP Minecraft 25565 TCP Screeps 21025 TCP Valheim 2456-2457 TCP/UDP If you don't know what internal IP the server is running on, you can always type on the terminal: ifconfig UFW \u00b6 ufw is a friendly frontend for iptables that makes it a lot easier to add connection rules to your firewall. One of the many wonders of ufw is the ability to add connection rules by specifying service names rather than ports (we'll see this when we'll set up the firewall rules for the next services). Installation \u00b6 We'll need to install ufw and set it up. sudo apt-get install ufw sudo ufw default allow outgoing sudo ufw default deny incoming sudo ufw enable Usage \u00b6 The commands should be pretty self-explanatory but, just in case, these default the firewall to allow any connections going from the server to the Internet and deny any incoming connections from the Internet to the server. A very good command to check ufw 's status (if it's enabled or disabled) and see all the custom rules added and active is: sudo ufw status SSH \u00b6 Installation \u00b6 Since the server will run in headless mode, it would be very useful to be able to access it remotely from within (and even outside) the network. We'll use OpenSSH , it is generally installed with the OS but in case that it isn't, you can install it by running: sudo apt-get install openssh-client openssh-server Setting-up \u00b6 We now need to allow SSH connections through the firewall so we can access the server. sudo ufw allow ssh Google Authentication (2FA) \u00b6 Two Factor Authentication has become a must-have in terms of account security, almost all services out there have the option to add this security measure to ensure account security. Luckily, we can implement our own Two Factor Authentication to access the server through SSH . Installation \u00b6 To enable 2FA , we'll need to install the following package: sudo apt-get install libpam-google-authenticator Setting-up \u00b6 To set it up, simply run: google-authenticator When running this, you'll receive a secret key which is used to add your account manually to your phone's 2FA application. Alternatively, you also get a nicely printed QR code on the terminal window (which you may need to resize to see fully) that you can scan with your phone. You will also get some scratch codes that you should always keep somewhere safe, just in case you lose access to your phone or something happens, you can still login to your server. To continue, answer y to all the questions to set up 2FA with the default settings. We now need to enable 2FA on SSH , to do this, edit the following file: sudo nano /etc/ssh/sshd_config Look for the following lines and edit them accordingly: UsePAM yes ChallengeResponseAuthentication yes Save and close the editor and restart the SSH service. sudo systemctl restart ssh We now need to edit the PAM rule file: sudo nano /etc/pam.d/sshd At the end of the file, add the following line: auth required pam_google_authenticator.so Save and close the file. Testing \u00b6 In order to test that 2FA works properly, open up a new SSH session without closing the previous one and try logging in, you'll be prompted for your user password and for the 2FA code which is available on your phone. Info When using 2FA for SSH , all the users in the server will need to set-it up, otherwise they won't be able to access their accounts. In case you get locked out from one of these users, you can always login to a sudoer account (usually the admin one which is added when installing the OS) and force-login with: sudo -iu <user> .","title":"Networking"},{"location":"setting-up/networking/#networking","text":"Here's a table that contains the required default ports that need to be forwarded on the router (and allowed by the firewall) so the services are accessible from outside the private network. Ports can change if desired, port forwarding rules should be set up accordingly.","title":"Networking"},{"location":"setting-up/networking/#port-forwarding-table","text":"Service Port Range Protocol SSH 22 TCP Virtualbox - RDP 3389 TCP TeamSpeak 3 - Voice 9987 UDP TeamSpeak 3 - File Transfer 30033 TCP TeamSpeak 3 - ServerQuery 10011 TCP OpenVPN 1194 UDP Squid 1337 TCP Plex 32400 TCP Transmission 9091 TCP Source Games 27000-27050 TCP/UDP Arma 3 2302-2345 TCP/UDP Assetto Corsa 9600 TCP/UDP Assetto Corsa - HTTP 8081 TCP Minecraft 25565 TCP Screeps 21025 TCP Valheim 2456-2457 TCP/UDP If you don't know what internal IP the server is running on, you can always type on the terminal: ifconfig","title":"Port Forwarding Table"},{"location":"setting-up/networking/#ufw","text":"ufw is a friendly frontend for iptables that makes it a lot easier to add connection rules to your firewall. One of the many wonders of ufw is the ability to add connection rules by specifying service names rather than ports (we'll see this when we'll set up the firewall rules for the next services).","title":"UFW"},{"location":"setting-up/networking/#installation","text":"We'll need to install ufw and set it up. sudo apt-get install ufw sudo ufw default allow outgoing sudo ufw default deny incoming sudo ufw enable","title":"Installation"},{"location":"setting-up/networking/#usage","text":"The commands should be pretty self-explanatory but, just in case, these default the firewall to allow any connections going from the server to the Internet and deny any incoming connections from the Internet to the server. A very good command to check ufw 's status (if it's enabled or disabled) and see all the custom rules added and active is: sudo ufw status","title":"Usage"},{"location":"setting-up/networking/#ssh","text":"","title":"SSH"},{"location":"setting-up/networking/#installation_1","text":"Since the server will run in headless mode, it would be very useful to be able to access it remotely from within (and even outside) the network. We'll use OpenSSH , it is generally installed with the OS but in case that it isn't, you can install it by running: sudo apt-get install openssh-client openssh-server","title":"Installation"},{"location":"setting-up/networking/#setting-up","text":"We now need to allow SSH connections through the firewall so we can access the server. sudo ufw allow ssh","title":"Setting-up"},{"location":"setting-up/networking/#google-authentication-2fa","text":"Two Factor Authentication has become a must-have in terms of account security, almost all services out there have the option to add this security measure to ensure account security. Luckily, we can implement our own Two Factor Authentication to access the server through SSH .","title":"Google Authentication (2FA)"},{"location":"setting-up/networking/#installation_2","text":"To enable 2FA , we'll need to install the following package: sudo apt-get install libpam-google-authenticator","title":"Installation"},{"location":"setting-up/networking/#setting-up_1","text":"To set it up, simply run: google-authenticator When running this, you'll receive a secret key which is used to add your account manually to your phone's 2FA application. Alternatively, you also get a nicely printed QR code on the terminal window (which you may need to resize to see fully) that you can scan with your phone. You will also get some scratch codes that you should always keep somewhere safe, just in case you lose access to your phone or something happens, you can still login to your server. To continue, answer y to all the questions to set up 2FA with the default settings. We now need to enable 2FA on SSH , to do this, edit the following file: sudo nano /etc/ssh/sshd_config Look for the following lines and edit them accordingly: UsePAM yes ChallengeResponseAuthentication yes Save and close the editor and restart the SSH service. sudo systemctl restart ssh We now need to edit the PAM rule file: sudo nano /etc/pam.d/sshd At the end of the file, add the following line: auth required pam_google_authenticator.so Save and close the file.","title":"Setting-up"},{"location":"setting-up/networking/#testing","text":"In order to test that 2FA works properly, open up a new SSH session without closing the previous one and try logging in, you'll be prompted for your user password and for the 2FA code which is available on your phone. Info When using 2FA for SSH , all the users in the server will need to set-it up, otherwise they won't be able to access their accounts. In case you get locked out from one of these users, you can always login to a sudoer account (usually the admin one which is added when installing the OS) and force-login with: sudo -iu <user> .","title":"Testing"},{"location":"setting-up/os-and-installation/","text":"OS and Installation \u00b6 Ubuntu Server 18.04 LTS 64-bit \u00b6 Keep in mind this guide is for a server running an Ubuntu/Debian flavored distro. For performance and compatibility reasons, the OS of choice is Ubuntu Server 18.04 LTS 64-bit in headless mode. The installation is a quick and easy process that is assisted by it's own install wizard. When asked what snapshot (initial server configuration) should be installed, simply choose none or just default . As a general rule of thumb, after installing the OS it is recommended to update the sources and packages: sudo apt-get update && sudo apt-get upgrade Sources \u00b6 A little issue that comes with Ubuntu Server is the limited apt sources that come pre-installed, to fix this we'll need to replace the sources.list file inside /etc/apt/ with a more complete version. sudo -s > /etc/apt/sources.list nano /etc/apt/sources.list Once the editor opens up, paste the following and save the file: # deb cdrom:[Ubuntu 18.04 LTS _Bionic Beaver_ - Release amd64 (20180426)]/ bionic main restricted # See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to # newer versions of the distribution. deb http://us.archive.ubuntu.com/ubuntu/ bionic main restricted # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic main restricted ## Major bug fix updates produced after the final release of the ## distribution. deb http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team. Also, please note that software in universe WILL NOT receive any ## review or updates from the Ubuntu security team. deb http://us.archive.ubuntu.com/ubuntu/ bionic universe # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic universe deb http://us.archive.ubuntu.com/ubuntu/ bionic-updates universe # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates universe ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team, and may not be under a free licence. Please satisfy yourself as to ## your rights to use the software. Also, please note that software in ## multiverse WILL NOT receive any review or updates from the Ubuntu ## security team. deb http://us.archive.ubuntu.com/ubuntu/ bionic multiverse # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic multiverse deb http://us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse ## N.B. software from this repository may not have been tested as ## extensively as that contained in the main release, although it includes ## newer versions of some applications which may provide useful features. ## Also, please note that software in backports WILL NOT receive any review ## or updates from the Ubuntu security team. deb http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse ## Uncomment the following two lines to add software from Canonical's ## 'partner' repository. ## This software is not part of Ubuntu, but is offered by Canonical and the ## respective vendors as a service to Ubuntu users. # deb http://archive.canonical.com/ubuntu bionic partner # deb-src http://archive.canonical.com/ubuntu bionic partner deb http://security.ubuntu.com/ubuntu bionic-security main restricted # deb-src http://security.ubuntu.com/ubuntu bionic-security main restricted deb http://security.ubuntu.com/ubuntu bionic-security universe # deb-src http://security.ubuntu.com/ubuntu bionic-security universe deb http://security.ubuntu.com/ubuntu bionic-security multiverse # deb-src http://security.ubuntu.com/ubuntu bionic-security multiverse To finish, refresh your sources. sudo apt-get update","title":"OS and Installation"},{"location":"setting-up/os-and-installation/#os-and-installation","text":"","title":"OS and Installation"},{"location":"setting-up/os-and-installation/#ubuntu-server-1804-lts-64-bit","text":"Keep in mind this guide is for a server running an Ubuntu/Debian flavored distro. For performance and compatibility reasons, the OS of choice is Ubuntu Server 18.04 LTS 64-bit in headless mode. The installation is a quick and easy process that is assisted by it's own install wizard. When asked what snapshot (initial server configuration) should be installed, simply choose none or just default . As a general rule of thumb, after installing the OS it is recommended to update the sources and packages: sudo apt-get update && sudo apt-get upgrade","title":"Ubuntu Server 18.04 LTS 64-bit"},{"location":"setting-up/os-and-installation/#sources","text":"A little issue that comes with Ubuntu Server is the limited apt sources that come pre-installed, to fix this we'll need to replace the sources.list file inside /etc/apt/ with a more complete version. sudo -s > /etc/apt/sources.list nano /etc/apt/sources.list Once the editor opens up, paste the following and save the file: # deb cdrom:[Ubuntu 18.04 LTS _Bionic Beaver_ - Release amd64 (20180426)]/ bionic main restricted # See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to # newer versions of the distribution. deb http://us.archive.ubuntu.com/ubuntu/ bionic main restricted # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic main restricted ## Major bug fix updates produced after the final release of the ## distribution. deb http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team. Also, please note that software in universe WILL NOT receive any ## review or updates from the Ubuntu security team. deb http://us.archive.ubuntu.com/ubuntu/ bionic universe # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic universe deb http://us.archive.ubuntu.com/ubuntu/ bionic-updates universe # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates universe ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team, and may not be under a free licence. Please satisfy yourself as to ## your rights to use the software. Also, please note that software in ## multiverse WILL NOT receive any review or updates from the Ubuntu ## security team. deb http://us.archive.ubuntu.com/ubuntu/ bionic multiverse # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic multiverse deb http://us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-updates multiverse ## N.B. software from this repository may not have been tested as ## extensively as that contained in the main release, although it includes ## newer versions of some applications which may provide useful features. ## Also, please note that software in backports WILL NOT receive any review ## or updates from the Ubuntu security team. deb http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse # deb-src http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse ## Uncomment the following two lines to add software from Canonical's ## 'partner' repository. ## This software is not part of Ubuntu, but is offered by Canonical and the ## respective vendors as a service to Ubuntu users. # deb http://archive.canonical.com/ubuntu bionic partner # deb-src http://archive.canonical.com/ubuntu bionic partner deb http://security.ubuntu.com/ubuntu bionic-security main restricted # deb-src http://security.ubuntu.com/ubuntu bionic-security main restricted deb http://security.ubuntu.com/ubuntu bionic-security universe # deb-src http://security.ubuntu.com/ubuntu bionic-security universe deb http://security.ubuntu.com/ubuntu bionic-security multiverse # deb-src http://security.ubuntu.com/ubuntu bionic-security multiverse To finish, refresh your sources. sudo apt-get update","title":"Sources"},{"location":"setting-up/packages-and-programs/","text":"Packages and Programs \u00b6 This is a list that contains a number of useful packages and programs that will become helpful when using the server. Screen \u00b6 Screen is a wonderful tool capable of improving multitasking on a single shell window with the ability to background processes. It also lets you recover shell windows when there's a connection loss. Installation \u00b6 Installing screen is as simple as running the following command: sudo apt-get install screen Usage \u00b6 At first it may seem a little complicated and maybe even intimidating to use this tool but once you get used to it you'll realize how useful it really is. First start up screen by typing: screen -S <socket name> Here's a table with the keys and actions you can use with screen : Keys Action Ctrl-a c Creates a new window. Ctrl-a n Switches between windows. Ctrl-a d Detaches from screen. Ctrl-a n Switches between screens. To reattach to a screen : screen -r <screen pid> or, screen -rd <screen socket name> VirtualBox \u00b6 VirtualBox is a machine virtualization tool which has the option to run in headless mode (pretty useful in this case), which directs all display and controls through an RDP connection. Not only can we run some VM's to run certain services that may need a dedicated environment, but we can also \"portabilize\" these servers, making it easier to back them up in case something goes wrong. In this case we'll use a VM to manage our router in a graphical environment without the need to install a DE or WM on the server (since we want it to remain headless). This VM doesn't require to run 24/7 and ends up being pretty useful considering the only alternative would be to forward X11 through SSH which is unstable and literally unusable in high latency connections. Installation \u00b6 Firstly we need to install some initial packages and reboot the server. sudo apt install build-essential dkms sudo reboot We now need to add the VirtualBox source to our apt sources and refresh them. sudo echo \"deb http://download.virtualbox.org/virtualbox/debian bionic contrib\" >> /etc/apt/sources.list sudo apt-get update Right before the installation we need to install Oracle's public key. wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - We're ready to install VirtualBox . sudo apt-get install virtualbox-5.2 Before creating/running our VM's we'll need to add our user to the vboxusers user group. (Replace $USER with your username.) sudo adduser $USER vboxusers We're not there yet, we still need to install the extension that will let VirtualBox run a VRDP server so we can use the VM remotely through an RDP connection. Download the VirtualBox Extension Pack corresponding to your version from Oracle's official site . To check your VirtualBox version, run: vboxmanage --version Copy the link and download through wget and install. (Keep in mind the example may show a link incompatible with your VirtualBox version). wget https://download.virtualbox.org/virtualbox/5.2.16/Oracle_VM_VirtualBox_Extension_Pack-5.2.16.vbox-extpack sudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.2.16.vbox-extpack Creating a VM \u00b6 Creating a VM is done through a series of commands, the process can be a little long to write so keep an eye of what you're about to input in your terminal window. As an example we'll install Lubuntu 18.04 64-bit . Download the iso file and keep it somewhere (for example in ~/Downloads ). Before we begin, we need to see what is our network interface, which is usually called eth0 enp0s3 wlan0 etc, depending on how many interfaces the server has or interface type. To see your interface name type in console: ifconfig You should receive an output similar to this one: enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.0.15 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 ::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x0<global> inet6 fe80::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x20<link> ether 08:00:27:49:85:61 txqueuelen 1000 (Ethernet) RX packets 755025 bytes 1132393073 (1.1 GB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 94785 bytes 9330879 (9.3 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 In our case enp0s3 is the name of our interface, it may be different for you . Now we begin. Feel free to change whatever to accommodate your needs. VBoxManage createvm --name \"Lubuntu\" --register VBoxManage modifyvm \"Lubuntu\" --memory 2048 --acpi on --boot1 dvd --nic1 nat --vram 128 --cpus 2 VBoxManage createhd --filename ~/VHDD/Lubuntu.vdi --size 10000 VBoxManage storagectl \"Lubuntu\" --name \"IDE Controller\" --add ide VBoxManage storageattach \"Lubuntu\" --storagectl \"IDE Controller\" --port 0 --device 0 --type hdd --medium ~/VHDD/Lubuntu.vdi VBoxManage storageattach \"Lubuntu\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium ~/Downloads/lubuntu-18.04-desktop-amd64.iso VBoxManage modifyvm \"Lubuntu\" --vrde on That's it, the VM is ready to be used, but before we go ahead and run it, we need to add some firewall rules so we can access the VRDP server. sudo ufw allow 3389/tcp Running the VM \u00b6 You can start your Headless VM with the following (keep in mind to replace with your own VM name): VBoxHeadless --startvm \"Lubuntu\" To control your VM, connect to your server's IP through a RDP client. (Remote Desktop on Windows, for example) Should you need to power off, reset or suspend your VM, use the following: VBoxManage controlvm \"Lubuntu\" poweroff VBoxManage controlvm \"Lubuntu\" pause VBoxManage controlvm \"Lubuntu\" reset Others \u00b6 These are other packages which may be required by the services that run on the machine. sudo apt-get install lib32gcc1 ranger unzip wget thunar Info lib32gcc1 is required by SteamCMD to be able to properly run certain game servers on a 64-bit architecture.","title":"Packages and Programs"},{"location":"setting-up/packages-and-programs/#packages-and-programs","text":"This is a list that contains a number of useful packages and programs that will become helpful when using the server.","title":"Packages and Programs"},{"location":"setting-up/packages-and-programs/#screen","text":"Screen is a wonderful tool capable of improving multitasking on a single shell window with the ability to background processes. It also lets you recover shell windows when there's a connection loss.","title":"Screen"},{"location":"setting-up/packages-and-programs/#installation","text":"Installing screen is as simple as running the following command: sudo apt-get install screen","title":"Installation"},{"location":"setting-up/packages-and-programs/#usage","text":"At first it may seem a little complicated and maybe even intimidating to use this tool but once you get used to it you'll realize how useful it really is. First start up screen by typing: screen -S <socket name> Here's a table with the keys and actions you can use with screen : Keys Action Ctrl-a c Creates a new window. Ctrl-a n Switches between windows. Ctrl-a d Detaches from screen. Ctrl-a n Switches between screens. To reattach to a screen : screen -r <screen pid> or, screen -rd <screen socket name>","title":"Usage"},{"location":"setting-up/packages-and-programs/#virtualbox","text":"VirtualBox is a machine virtualization tool which has the option to run in headless mode (pretty useful in this case), which directs all display and controls through an RDP connection. Not only can we run some VM's to run certain services that may need a dedicated environment, but we can also \"portabilize\" these servers, making it easier to back them up in case something goes wrong. In this case we'll use a VM to manage our router in a graphical environment without the need to install a DE or WM on the server (since we want it to remain headless). This VM doesn't require to run 24/7 and ends up being pretty useful considering the only alternative would be to forward X11 through SSH which is unstable and literally unusable in high latency connections.","title":"VirtualBox"},{"location":"setting-up/packages-and-programs/#installation_1","text":"Firstly we need to install some initial packages and reboot the server. sudo apt install build-essential dkms sudo reboot We now need to add the VirtualBox source to our apt sources and refresh them. sudo echo \"deb http://download.virtualbox.org/virtualbox/debian bionic contrib\" >> /etc/apt/sources.list sudo apt-get update Right before the installation we need to install Oracle's public key. wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - We're ready to install VirtualBox . sudo apt-get install virtualbox-5.2 Before creating/running our VM's we'll need to add our user to the vboxusers user group. (Replace $USER with your username.) sudo adduser $USER vboxusers We're not there yet, we still need to install the extension that will let VirtualBox run a VRDP server so we can use the VM remotely through an RDP connection. Download the VirtualBox Extension Pack corresponding to your version from Oracle's official site . To check your VirtualBox version, run: vboxmanage --version Copy the link and download through wget and install. (Keep in mind the example may show a link incompatible with your VirtualBox version). wget https://download.virtualbox.org/virtualbox/5.2.16/Oracle_VM_VirtualBox_Extension_Pack-5.2.16.vbox-extpack sudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.2.16.vbox-extpack","title":"Installation"},{"location":"setting-up/packages-and-programs/#creating-a-vm","text":"Creating a VM is done through a series of commands, the process can be a little long to write so keep an eye of what you're about to input in your terminal window. As an example we'll install Lubuntu 18.04 64-bit . Download the iso file and keep it somewhere (for example in ~/Downloads ). Before we begin, we need to see what is our network interface, which is usually called eth0 enp0s3 wlan0 etc, depending on how many interfaces the server has or interface type. To see your interface name type in console: ifconfig You should receive an output similar to this one: enp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.0.15 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 ::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x0<global> inet6 fe80::a00:27ff:fe49:8561 prefixlen 64 scopeid 0x20<link> ether 08:00:27:49:85:61 txqueuelen 1000 (Ethernet) RX packets 755025 bytes 1132393073 (1.1 GB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 94785 bytes 9330879 (9.3 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 In our case enp0s3 is the name of our interface, it may be different for you . Now we begin. Feel free to change whatever to accommodate your needs. VBoxManage createvm --name \"Lubuntu\" --register VBoxManage modifyvm \"Lubuntu\" --memory 2048 --acpi on --boot1 dvd --nic1 nat --vram 128 --cpus 2 VBoxManage createhd --filename ~/VHDD/Lubuntu.vdi --size 10000 VBoxManage storagectl \"Lubuntu\" --name \"IDE Controller\" --add ide VBoxManage storageattach \"Lubuntu\" --storagectl \"IDE Controller\" --port 0 --device 0 --type hdd --medium ~/VHDD/Lubuntu.vdi VBoxManage storageattach \"Lubuntu\" --storagectl \"IDE Controller\" --port 1 --device 0 --type dvddrive --medium ~/Downloads/lubuntu-18.04-desktop-amd64.iso VBoxManage modifyvm \"Lubuntu\" --vrde on That's it, the VM is ready to be used, but before we go ahead and run it, we need to add some firewall rules so we can access the VRDP server. sudo ufw allow 3389/tcp","title":"Creating a VM"},{"location":"setting-up/packages-and-programs/#running-the-vm","text":"You can start your Headless VM with the following (keep in mind to replace with your own VM name): VBoxHeadless --startvm \"Lubuntu\" To control your VM, connect to your server's IP through a RDP client. (Remote Desktop on Windows, for example) Should you need to power off, reset or suspend your VM, use the following: VBoxManage controlvm \"Lubuntu\" poweroff VBoxManage controlvm \"Lubuntu\" pause VBoxManage controlvm \"Lubuntu\" reset","title":"Running the VM"},{"location":"setting-up/packages-and-programs/#others","text":"These are other packages which may be required by the services that run on the machine. sudo apt-get install lib32gcc1 ranger unzip wget thunar Info lib32gcc1 is required by SteamCMD to be able to properly run certain game servers on a 64-bit architecture.","title":"Others"},{"location":"setting-up/wireguard/","text":"Wireguard \u00b6 Since the server was recently put under an ISP with a CG-NAT, the easiest way to keep the services accessible from the Internet would be using a VPN such as Wireguard through a VPS with a static public IP. In this particular case, an Ubuntu DigitalOcean droplet with the cheapest options has been chosen. Installation \u00b6 We'll need Wireguard on both the VPS and the server. Install them on both computers with the following command: sudo apt-get install wireguard VPS Configuration \u00b6 Inside the VPS, we'll first generate some keys: (umask 077 && printf \"[Interface]\\nPrivateKey= \" | sudo tee /etc/wireguard/wg0.conf > /dev/null) wg genkey | sudo tee -a /etc/wireguard/wg0.conf | wg pubkey | sudo tee /etc/wireguard/publickey Once this is setup, a config file will be generated in /etc/wireguard/wg0.conf with the private key already set. The public key will also be found inside /etc/wireguard/publickey . Open up the /etc/wireguard/wg0.conf file and add the following configuration: [Interface] PrivateKey = <PRIVATE KEY> ListenPort = 55107 Address = 192.168.4.1 PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE [Peer] PublicKey = <SERVER PUBLIC KEY> AllowedIPs = 192.168.4.2/32 Note You may still not have the server's public key, so complete the Server Configuration first before finalizing with this configuration file. Now, it is necessary to enable IPV4 Forwarding, for this open up /etc/sysctl.conf and uncomment the following line by removing the # : #net.ipv4.ip_forward=1 And then apply these changes by running: sudo sysctl -p sudo sysctl --system Then, we'll start and enable the tunnel service. sudo systemctl start wg-quick@wg0 sudo systemctl enable wg-quick@wg0 Server Configuration \u00b6 Just like we did on the VPS, we need to generate keys on the server. (umask 077 && printf \"[Interface]\\nPrivateKey= \" | sudo tee /etc/wireguard/wg0.conf > /dev/null) wg genkey | sudo tee -a /etc/wireguard/wg0.conf | wg pubkey | sudo tee /etc/wireguard/publickey Once again, a config file and a publickey will be found in /etc/wireguard/ . Open up the /etc/wireguard/wg0.conf file and add the following configuration: [Interface] PrivateKey = <PRIVATE KEY> Address = 192.168.4.2 [Peer] PublicKey = <VPS PUBLIC KEY> AllowedIPs = 0.0.0.0/0, ::/0 Endpoint = <VPS IPV4>:55107 PersistentKeepalive = 25 Then, we'll start and enable the tunnel service. sudo systemctl start wg-quick@wg0 sudo systemctl enable wg-quick@wg0 Testing \u00b6 To see if everything is fine, try to ping the server from the VPS with: ping 192.168.4.2 Do the same from the server to the VPS with: ping 192.168.4.1 If everything is fine, both machines should be able to ping each other. IPTables \u00b6 Once the tunnel is setup, we'll need to configure the VPS's firewall. Initialization \u00b6 By default, we'll setup iptables to drop all traffic so run the following: sudo iptables -P FORWARD DROP We'll need to allow traffic between wg0 and eth0 (assuming that eth0 is your VPS's network interface). sudo iptables -A FORWARD -i wg0 -o eth0 -m conntrack --cstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A FORWARD -i wg0 -o eth0 -m conntrack --cstate ESTABLISHED,RELATED -j ACCEPT Port Forwarding \u00b6 To forward a port, run the following commands: iptables -A FORWARD -i eth0 -o wg0 -p tcp --syn --dport [PORT] -m conntrack --ctstate NEW -j ACCEPT iptables -t nat -A PREROUTING -p tcp -i eth0 --dport [PORT] -j DNAT --to-destination 192.168.4.2 If the you need to forward a port range, just replace [PORT] with INITIAL_PORT:FINAL_PORT . You may also replace tcp with udp to forward UDP ports. Note Keep in mind that this should be done for every port you need to forward to the server. Persistent IPTables \u00b6 By default, these commands will be gone the next time the VPS reboots. In order to keep the IPTables, run the following commands: sudo apt-get install netfilter-persistent sudo netfilter-persistent save sudo systemctl enable netfilter-persistent sudo apt-get install iptables-persistent Note This should be run every time there's an update to the IPTables rules.","title":"Wireguard"},{"location":"setting-up/wireguard/#wireguard","text":"Since the server was recently put under an ISP with a CG-NAT, the easiest way to keep the services accessible from the Internet would be using a VPN such as Wireguard through a VPS with a static public IP. In this particular case, an Ubuntu DigitalOcean droplet with the cheapest options has been chosen.","title":"Wireguard"},{"location":"setting-up/wireguard/#installation","text":"We'll need Wireguard on both the VPS and the server. Install them on both computers with the following command: sudo apt-get install wireguard","title":"Installation"},{"location":"setting-up/wireguard/#vps-configuration","text":"Inside the VPS, we'll first generate some keys: (umask 077 && printf \"[Interface]\\nPrivateKey= \" | sudo tee /etc/wireguard/wg0.conf > /dev/null) wg genkey | sudo tee -a /etc/wireguard/wg0.conf | wg pubkey | sudo tee /etc/wireguard/publickey Once this is setup, a config file will be generated in /etc/wireguard/wg0.conf with the private key already set. The public key will also be found inside /etc/wireguard/publickey . Open up the /etc/wireguard/wg0.conf file and add the following configuration: [Interface] PrivateKey = <PRIVATE KEY> ListenPort = 55107 Address = 192.168.4.1 PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE [Peer] PublicKey = <SERVER PUBLIC KEY> AllowedIPs = 192.168.4.2/32 Note You may still not have the server's public key, so complete the Server Configuration first before finalizing with this configuration file. Now, it is necessary to enable IPV4 Forwarding, for this open up /etc/sysctl.conf and uncomment the following line by removing the # : #net.ipv4.ip_forward=1 And then apply these changes by running: sudo sysctl -p sudo sysctl --system Then, we'll start and enable the tunnel service. sudo systemctl start wg-quick@wg0 sudo systemctl enable wg-quick@wg0","title":"VPS Configuration"},{"location":"setting-up/wireguard/#server-configuration","text":"Just like we did on the VPS, we need to generate keys on the server. (umask 077 && printf \"[Interface]\\nPrivateKey= \" | sudo tee /etc/wireguard/wg0.conf > /dev/null) wg genkey | sudo tee -a /etc/wireguard/wg0.conf | wg pubkey | sudo tee /etc/wireguard/publickey Once again, a config file and a publickey will be found in /etc/wireguard/ . Open up the /etc/wireguard/wg0.conf file and add the following configuration: [Interface] PrivateKey = <PRIVATE KEY> Address = 192.168.4.2 [Peer] PublicKey = <VPS PUBLIC KEY> AllowedIPs = 0.0.0.0/0, ::/0 Endpoint = <VPS IPV4>:55107 PersistentKeepalive = 25 Then, we'll start and enable the tunnel service. sudo systemctl start wg-quick@wg0 sudo systemctl enable wg-quick@wg0","title":"Server Configuration"},{"location":"setting-up/wireguard/#testing","text":"To see if everything is fine, try to ping the server from the VPS with: ping 192.168.4.2 Do the same from the server to the VPS with: ping 192.168.4.1 If everything is fine, both machines should be able to ping each other.","title":"Testing"},{"location":"setting-up/wireguard/#iptables","text":"Once the tunnel is setup, we'll need to configure the VPS's firewall.","title":"IPTables"},{"location":"setting-up/wireguard/#initialization","text":"By default, we'll setup iptables to drop all traffic so run the following: sudo iptables -P FORWARD DROP We'll need to allow traffic between wg0 and eth0 (assuming that eth0 is your VPS's network interface). sudo iptables -A FORWARD -i wg0 -o eth0 -m conntrack --cstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A FORWARD -i wg0 -o eth0 -m conntrack --cstate ESTABLISHED,RELATED -j ACCEPT","title":"Initialization"},{"location":"setting-up/wireguard/#port-forwarding","text":"To forward a port, run the following commands: iptables -A FORWARD -i eth0 -o wg0 -p tcp --syn --dport [PORT] -m conntrack --ctstate NEW -j ACCEPT iptables -t nat -A PREROUTING -p tcp -i eth0 --dport [PORT] -j DNAT --to-destination 192.168.4.2 If the you need to forward a port range, just replace [PORT] with INITIAL_PORT:FINAL_PORT . You may also replace tcp with udp to forward UDP ports. Note Keep in mind that this should be done for every port you need to forward to the server.","title":"Port Forwarding"},{"location":"setting-up/wireguard/#persistent-iptables","text":"By default, these commands will be gone the next time the VPS reboots. In order to keep the IPTables, run the following commands: sudo apt-get install netfilter-persistent sudo netfilter-persistent save sudo systemctl enable netfilter-persistent sudo apt-get install iptables-persistent Note This should be run every time there's an update to the IPTables rules.","title":"Persistent IPTables"}]}